<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux指令速查🚀</title>
      <link href="/2023/05/27/Linux%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/05/27/Linux%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi3TCMSeF32kRYmI8qEfGc16lXNU.jpeg" alt></h1><a id="more"></a><h1 id="指令速查"><a href="#指令速查" class="headerlink" title="指令速查"></a>指令速查</h1><h2 id="指令-帮助"><a href="#指令-帮助" class="headerlink" title="指令-帮助"></a>指令-帮助</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>help</code></td><td></td></tr><tr><td><code>man</code></td><td>查看帮助命令</td></tr><tr><td><code>man ls</code></td><td>查看 ls 命令的帮助文档</td></tr></tbody></table><h2 id="指令-目录"><a href="#指令-目录" class="headerlink" title="指令-目录"></a>指令-目录</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><code>ls</code></td><td>列出目录及文件名，英文全拼：list files</td></tr></tbody></table><ul><li>ls -d ：只列出目录本身</li><li>ls -a 列出目录所有文件，包含以.开始的隐藏文件</li><li>ls -A 列出除.及..的其它文件</li><li>ls -r 反序排列</li><li>ls -t 以文件修改时间排序</li><li>ls -S 以文件大小排序</li><li>ls -h 以易读大小显示</li><li>ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<br>|<br>| <code>ls | sed &quot;s:^:</code>pwd<code>/:&quot;</code> | 列出文件绝对路径（不包含隐藏文件） | |<br>| <code>ls -l t*</code> | 列出当前目录中所有以”t”开头的目录的详细内容 | |<br>| <code>ls -lrS</code> | 按大小反序显示文件详细信息 | |<br>| <code>ls -lhrt</code> | 按易读方式按时间反序排序，并显示文件详细信息 | |<br>| <code>cd</code> [相对路径或绝对路径] | 切换目录，英文全拼：change directory |</li><li><strong>绝对路径</strong>：<br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</li><li><strong>相对路径</strong>：<br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法。</li><li><strong>~</strong> 也表示为 home 目录 的意思， <strong>.</strong> 则是表示目前所在的目录， <strong>..</strong> 则表示目前目录位置的上一层目录。<br>|<br>| <code>cd /</code> | 进入要目录 | |<br>| <code>cd ~</code> | 进入 “home” 目录 | |<br>| <code>cd -</code> | 进入上一次工作路径 | |<br>| <code>cd !$</code> | 把上个命令的参数作为 cd 参数使用 | |<br>| <code>pwd</code> | 显示目前的目录，英文全拼：print work directory |</li><li>-P ：显示出确实的路径，而非使用链接 (link) 路径。<br>|<br>| <code>pwd -P</code> | 查看软链接的实际路径 | |<br>| <code>mkdir</code> [-mp] 目录名称 | 创建一个新的目录，英文全拼：make directory |</li><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！<br>|<br>| <code>mkdir t</code> | 当前工作目录下创建名为 t 的文件夹 | |<br>| <code>mkdir -p /tmp/test/t1/t</code> | 在 tmp 目录下创建路径为 test/t1/t 的目录 | |<br>| <code>rmdir</code> [-p] 目录名称 | 删除一个空的目录，英文全拼：remove directory |</li><li>-p ：从该目录起，一次删除多级空目录<br>|<br>| <code>rmdir -p parent/child/child11</code> | 当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除 | |<br>| <code>cp</code> | 复制文件或目录，英文全拼：copy file |</li><li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>-d：若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身；</li><li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>-l：进行硬式链接(hard link)的链接档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>-r：递归持续复制，用於目录的复制行为；(常用)</li><li>-s：复制成为符号链接档 (symbolic link)，亦即『捷径』文件；</li><li>-u：若 destination 比 source 旧才升级 destination ！<br>|<br>| <code>cp -ai a.txt test</code> | 复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。 | |<br>| <code>cp -s a.txt link_a.txt</code> | 为 a.txt 建立一个链接（快捷方式） | |<br>| <code>rm [选项] 文件…</code> | 删除文件或目录，英文全拼：remove |</li><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！<br>|<br>| <code>rm -i *.log</code> | 删除任何 .log 文件，删除前逐一询问确认 | |<br>| <code>rm -rf test</code> | 删除 test 子目录及子目录中所有档案删除，并且不用一一确认 | |<br>| <code>rm -- -f*</code> | 删除以 -f 开头的文件 | |<br>| <code>mv</code> | 移动文件与目录，或修改文件与目录的名称，英文全拼：move file |</li><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)<br>|<br>| <code>mv test.log test1.txt</code> | 将文件 test.log 重命名为 test1.txt | |<br>| <code>mv llog1.txt log2.txt log3.txt /test3</code> | 将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 | |<br>| <code>mv -i log1.txt log2.txt</code> | 将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 | |<br>| <code>mv * ../</code> | 移动当前文件夹下的所有文件到上一级目录 | |</li></ul><h2 id="指令-文件"><a href="#指令-文件" class="headerlink" title="指令-文件"></a>指令-文件</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><strong>文件创建&amp;修改</strong></td><td></td><td></td></tr><tr><td><code>touch</code> [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][–help][–version][文件或目录…]</td></tr></tbody></table><ul><li>用于修改文件或者目录的时间属性，包括存取时间和更改时间。</li><li>若文件不存在，系统会建立一个新的文件。<br>|</li><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。<br>|<br>| <strong>文件编辑</strong> | | |<br>| <code>vim</code> [filename] | 启动 vi/vim，进行编辑。具体查看：<a href="#Ow1Ed">Vim 编辑器</a>。 | |<br>| <strong>文件查看</strong> | | |<br>| <code>cat</code> [-AbEnTv] | 由第一行开始显示文件内容 |</li><li>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符<br>|<br>| <code>cat file1 file2 &gt; file</code> | 将几个文件合并为一个文件 | |<br>| <code>cat &gt; filename</code> | 从键盘创建一个文件，只能创建新文件，不能编辑已有文。 | |<br>| <code>cat filename</code> | 一次显示整个文件 | |<br>| <code>tac</code> | 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ | |<br>| <code>nl</code> [-bnw] 文件 | 显示的时候，顺道输出行号！ |</li><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。<br>|<br>| <code>more</code> | 一页一页的显示文件内容 |</li><li>空白键 (space)：代表向下翻一页；</li><li>Enter：代表向下翻『一行』；</li><li>/字串：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f ：立刻显示出档名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。<br>|<br>| <code>more +3 text.txt</code> | 显示文件中从第 3 行起的内容 | |<br>| <code>ls -l | more -5</code> | 在所列出文件目录详细信息，借助管道使每次显示 5 行，按空格显示下 5 行。 | |<br>| <code>less</code> | 与 more 类似，但是比 more 更好的是，他可以往前翻页！ |</li><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻『字串』的功能；</li><li>?字串 ：向上搜寻『字串』的功能；</li><li>n：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q：离开 less 这个程序；<br>|<br>| <code>ps -aux | less -N</code> | ps 查看进程信息并通过 less 分页显示 | |<br>| <code>less 1.log 2.log</code> | 查看多个文件 | |<br>| <code>head</code> [-n number] 文件 | 只看头几行，默认显示前面 10 行 |</li><li>-n ：后面接数字，代表显示几行的意思<br>|<br>| <code>head 1.log -n 20</code> | 显示 1.log 文件中前 20 行 | |<br>| <code>head -c 20 log2014.log</code> | 显示 1.log 文件前 20 字节 | |<br>| <code>head -n -10 t.log</code> | 显示 t.log 最后 10 行 | |<br>| <code>tail</code> [-n number] 文件 | 只看尾巴几行 |</li><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c 才会结束 tail 的侦测<br>|<br>| <code>ping 127.0.0.1 &gt; ping.log &amp;</code> | 循环读取逐渐增加的文件内容 | |<br>| <code>tail -f ping.log</code> | 后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。 | |<br>| <strong>文件对比</strong> | | |<br>| <code>diff</code> | 文件对比 | |<br>| <code>diff -w name_list.txt name_list_new.txt</code> | 比较的时候忽略空白符 | |</li></ul><h2 id="指令-查找"><a href="#指令-查找" class="headerlink" title="指令-查找"></a>指令-查找</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><code>find</code></td><td>在文件树中查找文件，并作出相应的处理</td></tr></tbody></table><ul><li>-name 按照文件名查找文件</li><li>-perm 按文件权限查找文件</li><li>-user 按文件属主查找文件</li><li>-group 按照文件所属的组来查找文件。</li><li>-type 查找某一类型的文件，诸如：<ul><li>b - 块设备文件</li><li>d - 目录</li><li>c - 字符设备文件</li><li>l - 符号链接文件</li><li>p - 管道文件</li><li>f - 普通文件</li></ul></li><li>-size n :[c] 查找文件长度为 n 块文件，带有 c 时表文件字节大小</li><li>-amin n 查找系统中最后 N 分钟访问的文件</li><li>-atime n 查找系统中最后 n*24 小时访问的文件</li><li>-cmin n 查找系统中最后 N 分钟被改变文件状态的文件</li><li>-ctime n 查找系统中最后 n*24 小时被改变文件状态的文件</li><li>-mmin n 查找系统中最后 N 分钟被改变文件数据的文件</li><li>-mtime n 查找系统中最后 n*24 小时被改变文件数据的文件</li><li>(用减号-来限定更改时间在距今 n 日以内的文件，而用加号+来限定更改时间在距今 n 日以前的文件。 )</li><li>-maxdepth n 最大查找目录深度</li><li>-prune 选项来指出需要忽略的目录。在使用-prune 选项时要当心，因为如果你同时使用了-depth 选项，那么-prune 选项就会被 find 命令忽略</li><li>-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer 选项<br>|<br>| <code>find -atime -2</code> | 查找 48 小时内修改过的文件 | |<br>| <code>find ./ -name &#39;*.log&#39;</code> | 在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录 | |<br>| <code>find -size +1000c</code> | 查找大于 1K 的文件 | |<br>| <code>find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; {} \\</code> | 当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件 | |<br>| <code>grep</code> | 文本搜索命令 |</li><li>-A n –after-context 显示匹配字符后 n 行</li><li>-B n –before-context 显示匹配字符前 n 行</li><li>-C n –context 显示匹配字符前后 n 行</li><li>-c –count 计算符合样式的列数</li><li>-i 忽略大小写</li><li>-l 只列出文件内容符合指定的样式的文件名称</li><li>-f 从文件中读取关键词</li><li>-n 显示匹配内容的所在文件中行数</li><li>-R 递归查找文件夹<br>|<br>| <code>ps -ef | grep svn</code> | 查找指定进程 | |<br>| <code>ps -ef | grep svn -c</code> | 查找指定进程个数 | |<br>| <code>cat test1.txt | grep -f key.log</code> | 从文件中读取关键词 | |<br>| <code>which</code> | 查看可执行文件的位置 | |<br>| <code>which cd</code> | 查看 cd，显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令。 | |<br>| <code>locate</code> | 配合数据库查看文件位置 |</li><li>-l num（要显示的行数）</li><li>-f 将特定的档案系统排除在外，如将 proc 排除在外</li><li>-r 使用正则运算式做为寻找条件<br>|</li></ul><h2 id="指令-系统管理"><a href="#指令-系统管理" class="headerlink" title="指令-系统管理"></a>指令-系统管理</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><strong>磁盘信息</strong></td><td></td><td></td></tr><tr><td><code>df</code></td><td>显示磁盘空间使用情况</td></tr></tbody></table><ul><li>-a 全部文件系统列表</li><li>-h 以方便阅读的方式显示信息</li><li>-i 显示 inode 信息</li><li>-k 区块为 1024 字节</li><li>-l 只显示本地磁盘</li><li>-T 列出文件系统类型<br>|<br>| <code>df -l</code> | 显示磁盘使用情况 | |<br>| <code>df -haT</code> | 以易读方式列出所有文件系统及其类型 | |<br>| <code>du [选项] [文件]</code> | 对文件和目录磁盘使用的空间的查看 |</li><li>-a 显示目录中所有文件大小</li><li>-k 以 KB 为单位显示文件大小</li><li>-m 以 MB 为单位显示文件大小</li><li>-g 以 GB 为单位显示文件大小</li><li>-h 以易读方式显示文件大小</li><li>-s 仅显示总计</li><li>-c 或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和<br>|<br>| <code>du -h scf/</code> | 以易读方式显示文件夹内及子文件夹大小 | |<br>| <code>du -ah scf/</code> | 以易读方式显示文件夹内所有文件大小 | |<br>| 进程管理 | | |<br>| <code>ps</code> | 查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top |</li><li>-A 显示所有进程</li><li>a 显示所有进程</li><li>-a 显示同一终端下所有进程</li><li>c 显示进程真实名称</li><li>e 显示环境变量</li><li>f 显示进程间的关系</li><li>r 显示当前终端运行的进程</li><li>-aux 显示所有包含其它使用的进程<br>|<br>| <code>ps -ef</code> | 显示当前所有进程 | |<br>| <code>ps-ef | grep java</code> | 显示当前所有 java 相关进程 | |<br>| <code>top</code> | 正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等 |</li><li>-c 显示完整的进程命令</li><li>-s 保密模式</li><li>-p &lt;进程号&gt; 指定进程显示</li><li>-n &lt;次数&gt;循环显示次数<br>|<br>| <code>top -u oracle</code> | 显示某个特定用户的进程，可以使用-u 选项 | |<br>| <code>kill</code> | 杀死进程。 |</li><li>-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</li><li>-a 当处理当前进程时，不限制命令名和进程号的对应关系</li><li>-p 指定 kill 命令只打印相关进程的进程号，而不发送任何信号</li><li>-s 指定发送信号</li><li>-u 指定用户<br>|<br>| <code>kill -9 $(ps -ef | grep pro1)</code> | 先使用 ps 查找进程 pro1，然后用 kill 杀掉 | |<br>| <code>kill -s 9 27810</code> | 杀死进程号为 27810 的进程，强制终止，系统资源无法回收。 | |<br>| shutdown | 关机与重启 | |<br>| <code>shutdown -h now</code> | 立刻关机 | |<br>| <code>shutdown -r -t 60</code> | 60 秒后重启 | |<br>| <code>shutdown -r now</code> | 重启(1) | |<br>| <code>reboot</code> | 重启(2) | |</li></ul><h2 id="指令-网络通讯"><a href="#指令-网络通讯" class="headerlink" title="指令-网络通讯"></a>指令-<strong>网络通讯</strong></h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>ifconfig</code></td><td>显示网络设备情况</td></tr><tr><td><code>netstat</code></td><td>显示网络相关信</td></tr><tr><td>netstat -a</td><td>列出所有端口</td></tr><tr><td>netstat -tunlp</td><td>grep 端口号</td><td>查看进程端口号</td></tr><tr><td><code>ping</code></td><td></td></tr><tr><td><code>ping -b 192.168.120.1</code></td><td></td></tr><tr><td><code>ping -c 5 gmail.com</code></td><td>ping 一个远程主机，只发 5 个数据包</td></tr><tr><td><code>dig</code></td></tr></tbody></table><p>| <code>curl</code><br><a href="https://curl.se/docs/" target="_blank" rel="noopener">官方文档</a> | 用来请求 Web 服务器。 |<br>| <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a> | MacOS 软件包管理器 |<br>| <strong>软件下载与安装</strong> | |<br>| <code>/bin/bash -c &quot;$(curl -fsSL [https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;](https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;)</code> | 安装<code>Homebrew</code> |<br>| <code>brew install wget</code> | 安装<code>wget</code> |<br>| <code>wget</code><br><a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">官方文档</a> | wget 是一个使用 HTTP,HTTPS,FTP 和 FTPS 协议来下载文件的免费软件 |<br>| <code>wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code> | 使用 wget 从网上下载软件、音乐、视频 |<br>| <code>wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code> | 下载文件并以指定的文件名保存文件 |<br>| <code>wget -b http://www.baidu.com/index.html</code> | 使用 wget -b 后台下载 |<br>| <code>tail -f wget-log</code> | 查看下载进度 |<br>| <code>ftp</code> | 连接 ftp 服务器并下载多个文件 |<br>| <code>ftp IP/hostname</code> | |</p><h2 id="指令-备份压缩"><a href="#指令-备份压缩" class="headerlink" title="指令-备份压缩"></a>指令-备份压缩</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>tar</code></td><td>压缩或解压</td></tr><tr><td><code>tar cvf archive_name.tar dirname/</code></td><td>压缩文件</td></tr><tr><td><code>tar xvf archive_name.tar</code></td><td>解压文件</td></tr><tr><td><code>tar tvf archive_name.tar</code></td><td>查看 tar 文件</td></tr><tr><td><code>gzip</code></td><td>压缩或解压</td></tr><tr><td><code>gzip test.txt</code></td><td>创建一个*.gz 的压缩文件</td></tr><tr><td><code>gzip -d test.txt.gz</code></td><td>解压*.gz 文件</td></tr><tr><td><code>gzip -l *.gz</code></td><td>显示压缩的比率</td></tr></tbody></table><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th></th></tr></thead><tbody><tr><td><strong>mysql</strong></td><td></td><td></td></tr><tr><td><strong>安装与连接</strong></td><td></td><td></td></tr><tr><td><code>wget [http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz](http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz)</code></td><td>下载 mysql</td><td></td></tr><tr><td><code>tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</code></td><td>解压 mysql 压缩包</td><td></td></tr><tr><td><code>mysql -u root -p -h 192.168.1.2</code></td><td>连接一个远程数据库，需要输入密码</td><td></td></tr><tr><td><code>mysql -u root -p</code></td><td>连接本地数据库</td><td></td></tr><tr><td><code>lsof -i:3306</code></td><td>查看 Mysql 服务</td><td></td></tr><tr><td><code>service mysql status</code></td><td>查看数据库状态</td><td></td></tr><tr><td><strong>数据库操作</strong></td><td></td><td></td></tr><tr><td><code>show databases</code></td><td>查看数据库</td><td></td></tr><tr><td><code>use dbname</code></td><td>管理数据库</td><td></td></tr><tr><td><code>show tables</code></td><td>查看数据库表</td><td></td></tr><tr><td><code>desc tablename</code></td><td>查看表结构</td><td></td></tr><tr><td><code>drop table [if exists] tablename;</code></td><td>删除表</td><td></td></tr><tr><td><a href="https://wangdoc.com/ssh/" target="_blank" rel="noopener"><strong>ssh</strong></a></td><td><strong>登录远程服务器</strong></td><td></td></tr><tr><td><code>yum install ssh</code></td><td>安装 SSH</td><td></td></tr><tr><td><code>service sshd start</code></td><td>启动 SSH</td><td></td></tr><tr><td><code>service sshd restart</code></td><td>重启 SSH</td><td></td></tr><tr><td><code>ssh root@127.0.0.1 -p22</code></td><td>登录远程服务器</td></tr></tbody></table><ul><li>-p 后面是端口号</li><li>root 是服务器用户名</li><li><p>127.0.0.1 是服务器 ip<br>|<br>| <code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> | 生成密钥 | |<br>| <code>cat ~/.ssh/id_rsa.pub</code> | 查看公钥 | |<br>| <code>ssh -T git@github.com</code> | 测试 SSH 是否生效 | |<br>| ssh-agent | 密钥管理器 | |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">  ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>| 使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。 |  |<br>| <strong>node</strong> |  |  |<br>| <code>wget [https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz](https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz)</code> | 下载node |  |<br>| <code>tar xvf node-v6.9.5-linux-x64.tar.xz</code> | 解压到当前目录 |  |<br>| <code>ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node</code><br><code>ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm</code> | 创建软链接，使node和npm命令全局有效 |  |<br>| <strong>nvm</strong> | <strong>Node版本管理器</strong> |  |<br>| <code>nvm ls</code> | 列出Node.js的所有版本。 |  |<br>| <code>nvm use v4.9.1</code> | 切换node版本 |  |<br>| <strong>npm</strong> | <strong>Node包管理器</strong> |  |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">npm view node versions</span><br><span class="line">sudo n 10.14.2</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p></li></ul><p>或<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">npm view node versions</span><br><span class="line">sudo n stable</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p> | 升级 Node 版本 |  |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm package-lock.json</span><br><span class="line">npm cache clear --force</span><br><span class="line">npm install</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>| 重新安装依赖 | |<br>| <code>npm config set registry [https://registry.npm.taobao.org](https://registry.npm.taobao.org)</code> | 配置淘宝镜像 | |</p><h2 id="文本编辑器-vi-vim"><a href="#文本编辑器-vi-vim" class="headerlink" title="文本编辑器 vi/vim"></a>文本编辑器 vi/vim</h2><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>命令模式</strong></td><td>用户刚刚启动 vi/vim，便进入了命令模式。</td></tr><tr><td><code>i</code></td><td>切换到输入模式，以输入字符。</td></tr><tr><td><code>x</code></td><td>删除当前光标所在处的字符。</td></tr><tr><td><code>:</code></td><td>切换到底线命令模式，以在最底一行输入命令。</td></tr><tr><td><strong>输入模式</strong></td><td>在命令模式下按下 i 就进入了输入模式。</td></tr><tr><td>字符按键以及 Shift 组合</td><td>输入字符</td></tr><tr><td>ENTER</td><td>回车键，换行</td></tr><tr><td>BACK SPACE</td><td>退格键，删除光标前一个字符</td></tr><tr><td>DEL</td><td>删除键，删除光标后一个字符</td></tr><tr><td>方向键</td><td>在文本中移动光标</td></tr><tr><td>HOME/END</td><td>移动光标到行首/行尾</td></tr><tr><td>Page Up/Page Down</td><td>上/下翻页</td></tr><tr><td>Insert</td><td>切换光标为输入/替换模式，光标将变成竖线/下划线</td></tr><tr><td>ESC</td><td>退出输入模式，切换到命令模式</td></tr><tr><td><strong>底线命令模式</strong></td><td>在命令模式下按下:（英文冒号）就进入了底线命令模式。</td></tr><tr><td><code>q</code></td><td>退出程序</td></tr><tr><td><code>w</code></td><td>保存文件</td></tr></tbody></table><p><a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener">史上最全 Vim 快捷键键位图（入门到进阶） | 菜鸟教程</a></p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th><strong>快捷键</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>Ctrl + a</code></td><td>光标到开头</td></tr><tr><td><code>Ctrl + c</code></td><td>中断当前程序</td></tr><tr><td><code>Ctrl + d</code></td><td>退出当前窗口或当前用户</td></tr><tr><td><code>Ctrl + e</code></td><td>光标到结尾</td></tr><tr><td><code>Ctrl + l</code></td><td>清屏 相当与 clear</td></tr><tr><td><code>Ctrl + u</code></td><td>剪切、删除（光标以前的）内容</td></tr><tr><td><code>Ctrl + k</code></td><td>剪切、删除（光标以后的）内容</td></tr><tr><td><code>Ctrl + r</code></td><td>查找（最近用过的命令）</td></tr><tr><td><code>tab</code></td><td>所有路径以及补全命令</td></tr><tr><td><code>Ctrl+shift+c</code></td><td>命令行复制内容</td></tr><tr><td><code>Ctrl+shift+v</code></td><td>命令行粘贴内容</td></tr><tr><td><code>Ctrl + q</code></td><td>取消屏幕锁定</td></tr><tr><td><code>Ctrl + s</code></td><td>执行屏幕锁定</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.ruanyifeng.com/blog/2022/01/cli-alternative-tools.html" target="_blank" rel="noopener">命令行常用工具的替代品 - 阮一峰的网络日志</a><br><a href="https://juejin.cn/post/6844903930166509581#heading-140" target="_blank" rel="noopener">45 个常用 Linux 命令，让你轻松玩转 Linux！ - 掘金</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux 命令大全 | 菜鸟教程</a><br><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html" target="_blank" rel="noopener">Linux 常用命令学习 | 菜鸟教程</a><br><a href="https://developer.aliyun.com/article/842453" target="_blank" rel="noopener">Linux 常用命令详细大全（面试常考）-阿里云开发者社区</a><br><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html" target="_blank" rel="noopener">50 个最常用的 Unix/Linux 命令 - GongYong</a><br><a href="https://www.liuxing.io/blog/curl/" target="_blank" rel="noopener">Curl 使用指南</a><br><a href="https://blog.devhitao.com/2020/01/18/homebrew-usage/" target="_blank" rel="noopener">Homebrew 安装、使用、升级和卸载</a><br><a href="https://www.jianshu.com/p/53a7d11a7250" target="_blank" rel="noopener">报错：Failed to upgrade Homebrew Portable Ruby</a></p><hr><p>最后，重学前端，将思考固定下来。</p><ul><li>笔记和记忆力是提高开发效率的最好方法。</li><li>如果没有对旧事物进行大量练习，你不太可能发现新事物。</li><li>努力学习最感兴趣的东西。<blockquote><p>©️ 版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/songxingguo/devhints/vtheqvmkw27cx4k8" target="_blank" rel="noopener">原文地址-语雀</a></p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git指令速查🚀</title>
      <link href="/2023/04/29/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/04/29/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FojivBC2iy6WcdLcl88n9CGxYQje.jpeg" alt></p><blockquote><p>文中 Git 相关术语都来源于中文版 Sourcetree。</p></blockquote><a id="more"></a><h1 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h1><h2 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>版本信息</strong></td><td></td></tr><tr><td>git –version</td><td>git 版本</td></tr><tr><td><strong>指令帮助</strong></td><td></td></tr><tr><td>git [指令] -h</td><td>查看指令帮助信息</td></tr><tr><td>git [指令] –help</td><td>打开指令详细帮助页面</td></tr><tr><td><strong>查看日志：</strong></td><td></td></tr><tr><td>git log -n20</td><td>查看日志(最近 20 条)，可省略 n 为-20；参数–graph 可视化显示分支关系</td></tr><tr><td>git log –follow [file]</td><td>显示某个文件的版本历史，包括文件改名</td></tr><tr><td>git log -n20 –graph</td><td>参数“–graph”可视化显示分支关系</td></tr><tr><td>git log –follow [file]</td><td>显示某个文件的版本历史</td></tr><tr><td>git reflog</td><td>查看所有可用的历史版本记录（实际是 HEAD 变更记录），包含被回退的记录，常用来撤销回退</td></tr><tr><td>git blame [file]</td><td>以列表形式查看指定文件的历史修改记录</td></tr><tr><td><strong>格式化日志</strong></td><td></td></tr><tr><td>git log -n20 –oneline</td><td>参数“–oneline”可以让日志输出更简洁（一行）</td></tr><tr><td>git log –pretty=oneline</td><td>一行显示提交信息</td></tr><tr><td><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FuWCRNpZRL3DthGQmtXZ2PmEXWhC.png" alt></td></tr><tr><td>git log –pretty=format:”%h %s” –graph</td><td>自定义输出格式</td></tr><tr><td><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi3loaRpO70Ko7Lj8TKZX9StjUbr.png" alt></td></tr><tr><td><strong>筛选日志</strong></td><td></td></tr><tr><td>git log –pretty=format:”%s” –since=”2019-07-17 07:36pm” –until=”2019-07-29 08:28pm”</td><td>查询指定时间区间的提交</td></tr><tr><td>git log –pretty=format:”%s” –since=”2019-07-17 07:36pm” –until=”2019-07-29 08:28pm” –grep=”feat”</td><td>查询包含指定字段的提交</td></tr><tr><td><strong>导出日志</strong></td><td></td></tr><tr><td>git log &gt; log.txt</td><td>导出 Git log 日志</td></tr><tr><td>git log –pretty=format:”%s” –graph –since=”2019-10-14 02 18 pm” –grep=”feat” &gt; log.txt</td><td>同上，日志格式化后导出日志</td></tr><tr><td><strong>创建仓库</strong></td><td></td></tr><tr><td>git init [文件目录]</td><td>初始化创建 Git 仓库，如果不指定[文件目录]，则在当前目录创建</td></tr><tr><td><strong>Git 配置</strong></td><td></td></tr><tr><td>git config –list</td><td>查看配置信息，包括系统（–system）+全局（–global）+项目（–local）配置</td></tr><tr><td>git config –list –system</td><td>查看系统配置，全局（–global）、项目（–local）配置配置类似</td></tr><tr><td>git config –global user.name “名称”</td><td>配置用户名</td></tr><tr><td>git config –global user.email “邮箱”</td><td>配置邮箱</td></tr><tr><td><strong>查看文件</strong></td><td></td></tr><tr><td>cat [file]</td><td>读取一个文件，展示其文件内容</td></tr></tbody></table><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>本地操作<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi1V3kEfywqqGsGVyTMiHF2CCh2D.png" alt></p><h3 id="指令-代码"><a href="#指令-代码" class="headerlink" title="指令-代码"></a>指令-代码</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>状态</strong></td><td></td></tr><tr><td>git status</td><td>查看本地仓库状态，加参数-s 简洁模式</td></tr><tr><td><strong>添加到/移除暂存区</strong></td><td></td></tr><tr><td>git add [file1] [file2]</td><td>添加文件到暂存区，包括修改的文件、新增的文件</td></tr><tr><td>git add [dir]</td><td>同上，添加目录到暂存区，包括子目录</td></tr><tr><td>git add .</td><td>同上，添加所有修改、新增文件（未跟踪）到暂存区</td></tr><tr><td>git rm [file]</td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><strong>提交到工作区</strong></td><td></td></tr><tr><td>git commit -m “说明”</td><td>‘说明’ 提交变更，参数-m 设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td></tr><tr><td>git commit -a</td><td>参数-a，表示直接从工作区提交到版本库，略过了 git add 步骤，不包括新增的文件</td></tr><tr><td>git commit [file]</td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td>git commit –amend -m</td><td>使用一次新的 commit，替代上一次提交，会修改 commit 的 hash 值（id）</td></tr></tbody></table><h3 id="指令-提交"><a href="#指令-提交" class="headerlink" title="指令-提交"></a>指令-提交</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>拣选提交</strong></td><td></td></tr><tr><td>git cherry-pick [commit]</td><td>拣选提交，复制一个特定的提交到当前分支，而不管这个提交在哪个分支</td></tr><tr><td><strong>整理提交</strong></td><td></td></tr><tr><td>git rebase master</td><td>将当前分支变基合并到 master 分支， 注意 ⚠️ 只在从未推送至共用仓库的提交上执行变基命令。</td></tr><tr><td><strong>重置提交</strong></td><td></td></tr><tr><td>git reset</td><td>撤销暂存区状态，同 git reset HEAD，不影响工作区，默认使用混合重置(mixed)模式</td></tr><tr><td>git reset HEAD [file]</td><td>同上，指定文件 file，HEAD 可省略</td></tr><tr><td>git reset [commit]</td><td>回退到指定版本，清空暂存区，不影响工作区。工作区需要手动 git checkout 签出</td></tr><tr><td>git reset –soft [commit]</td><td>移动分支 master、HEAD 到指定的版本，不影响暂存区、工作区，需手动 git checkout 签出更新</td></tr><tr><td>git reset –hard HEAD</td><td>撤销工作区、暂存区的修改，用当前最新版</td></tr><tr><td>git reset –hard HEAD~</td><td>回退到上一个版本，并重置工作区、暂存区内容</td></tr><tr><td>git reset –hard [commit]</td><td>回退到指定版本，并重置工作区、暂存区内容，举例：<code>git reset --hard 7678a31</code></td></tr><tr><td><strong>撤销提交</strong></td><td></td></tr><tr><td>git revert [commit]</td><td>撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已 push 则重新 push 即可</td></tr></tbody></table><h3 id="指令-储藏"><a href="#指令-储藏" class="headerlink" title="指令-储藏"></a>指令-储藏</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看暂存</strong></td><td></td></tr><tr><td>git stash list</td><td>查看所有被隐藏的内容列表</td></tr><tr><td>储藏<strong>代码</strong></td><td></td></tr><tr><td>git stash save “message”</td><td>同 git stash，可以备注说明 message git stash apply 恢复被隐藏的文件，但是隐藏记录不删除</td></tr><tr><td>git stash</td><td>把未提交内容隐藏起来，包括未暂存、已暂存。 等以后恢复现场后继续工作</td></tr><tr><td><strong>恢复代码</strong></td><td></td></tr><tr><td>git stash pop</td><td>恢复被隐藏的内容，同时删除隐藏记录</td></tr><tr><td><strong>删除</strong>储藏</td><td></td></tr><tr><td>git stash drop</td><td>删除隐藏记录</td></tr></tbody></table><h2 id="远程交互"><a href="#远程交互" class="headerlink" title="远程交互"></a>远程交互</h2><p>远程交互<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FtfIh_8MpJOKVw4wChaxrxqruY-m.png" alt></p><h3 id="指令-仓库"><a href="#指令-仓库" class="headerlink" title="指令-仓库"></a>指令-仓库</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看/新建/修改/删除仓库</strong></td><td></td></tr><tr><td>git remote -v</td><td>查看所有远程仓库，不带参数-v 只显示名称</td></tr><tr><td>git remote show [remote]</td><td>显示某个远程仓库的信息</td></tr><tr><td>git remote add [name] [url]</td><td>增加一个新的远程仓库，并命名</td></tr><tr><td>git remote rename [old] [new]</td><td>修改远程仓库名称</td></tr><tr><td>git remote rm [remote-name]</td><td>删除远程仓库</td></tr><tr><td><strong>克隆仓库</strong></td><td></td></tr><tr><td>git clone [git 地址]</td><td>从远程仓库克隆到本地（当前目录）</td></tr><tr><td><strong>拉取仓库</strong></td><td></td></tr><tr><td>git pull [remote] [branch]</td><td>取回远程仓库的变化，并与本地版本合并</td></tr><tr><td>git pull</td><td>同上，针对当前分支</td></tr><tr><td>git pull –rebase</td><td>使用 rebase 的模式进行合并</td></tr><tr><td>git fetch [remote]</td><td>获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td></tr><tr><td><strong>推送仓库</strong></td><td></td></tr><tr><td>git push</td><td>推送当前分支到远程仓库</td></tr><tr><td>git push [remote] [branch]</td><td>推送本地当前分支到远程仓库的指定分支</td></tr><tr><td>git push [remote] –force/-f</td><td>强行推送当前分支到远程仓库，即使有冲突，⚠️ 很危险！</td></tr><tr><td>git push [remote] –all</td><td>推送所有分支到远程仓库</td></tr><tr><td>git push –u</td><td>参数–u 表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td></tr></tbody></table><h3 id="指令-分支"><a href="#指令-分支" class="headerlink" title="指令-分支"></a>指令-分支</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>分支查询</strong></td><td></td></tr><tr><td>git branch</td><td>列出所有本地分支，加参数-v 显示详细列表，下同</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支，用不同颜色区分</td></tr><tr><td><strong>分支新建</strong></td><td></td></tr><tr><td>git branch [branch-name]</td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git branch [branch] [commit]</td><td>新建一个分支，指向指定 commit id</td></tr><tr><td>git branch –track [branch] [remote-branch]</td><td>新建一个分支，与指定的远程分支建立关联</td></tr><tr><td><strong>分支切换</strong></td><td></td></tr><tr><td>git checkout .</td><td>撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td></tr><tr><td>git checkout [file]</td><td>同上，file 指定文件</td></tr><tr><td>git checkout HEAD .</td><td>撤销工作区、暂存区的修改，用 HEAD 指向的当前分支最新版本替换工作区、暂存区</td></tr><tr><td>git checkout HEAD [file]</td><td>同上，file 指定文件</td></tr><tr><td>git checkout -b dev</td><td>从当前分支创建并切换到 dev 分支</td></tr><tr><td>git checkout -b feature1 dev</td><td>从本地 dev 分支代码创建一个 feature1 分支，并切换到新分支</td></tr><tr><td>git checkout -b hotfix remote hotfix</td><td>从远端 remote 的 hotfix 分支创建本地 hotfix 分支</td></tr><tr><td><strong>分支切换：</strong>✅switch：新的分支切换指令，切换功能和 checkout 一样，switch 只单纯的用于切换</td><td></td></tr><tr><td>git switch master</td><td>切换到已有的 master 分支</td></tr><tr><td>git switch -c dev</td><td>创建并切换到新的 dev 分支</td></tr><tr><td><strong>分支合并</strong></td><td></td></tr><tr><td>git merge [branch]</td><td>合并指定分支到当前分支</td></tr><tr><td>git merge –no-ff dev</td><td>合并 dev 分支到当前分支，参数–no-ff 禁用快速合并模式</td></tr><tr><td><strong>分支删除</strong></td><td></td></tr><tr><td>git branch -d dev</td><td>删除 dev 分支，-D（大写）强制删除</td></tr><tr><td>git push origin –delete [branch-name]</td><td>删除远程分支</td></tr><tr><td>git branch -r</td><td>grep ‘origin/dependabot’</td><td>sed ‘s/origin\///g’</td><td>xargs -I {} git push origin :{}</td><td>批量删除远端分支</td></tr><tr><td><strong>跟踪分支</strong></td><td></td></tr><tr><td>git branch –set-upstream [branch] [remote-branch]</td><td>在现有分支与指定的远程分支之间建立跟踪关联：</td></tr></tbody></table><p><code>git branch --set-upstream hotfix remote/hotfix git checkout [branch-name]</code><br>切换到指定分支，并更新工作区 |</p><h3 id="指令-标签"><a href="#指令-标签" class="headerlink" title="指令-标签"></a>指令-标签</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看标签</strong></td><td></td></tr><tr><td>git tag</td><td>查看标签列表</td></tr><tr><td>git tag -l ‘a*‘</td><td>查看名称是“a”开头的标签列表，带查询参数</td></tr><tr><td>git show [tagname]</td><td>查看标签信息</td></tr><tr><td><strong>创建标签</strong></td><td></td></tr><tr><td>git tag [tagname]</td><td>创建一个标签，默认标签是打在最新提交的 commit 上的</td></tr><tr><td>git tag [tagname] <commit id></commit></td><td>新建一个 tag 在指定 commit 上</td></tr><tr><td>git tag -a v5.1 -m’v5.1 版本’</td><td>创建标签 v5.1.1039，-a 指定标签名，-m 指定说明文字</td></tr><tr><td><strong>切换标签</strong></td><td></td></tr><tr><td>git checkout v5.1.1039</td><td>切换标签，同切换分支</td></tr><tr><td><strong>推送标签</strong></td><td></td></tr><tr><td>git push [remote] v5.1</td><td>推送标签，标签不会默认随代码推送推送到服务端</td></tr><tr><td>git push [remote] –tags</td><td>提交所有 tag</td></tr><tr><td><strong>删除标签</strong></td><td></td></tr><tr><td>git tag -d [tagname]</td><td>删除本地标签</td></tr></tbody></table><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="指令-bisect"><a href="#指令-bisect" class="headerlink" title="指令-bisect"></a>指令-bisect</h3><blockquote><p>git bisect 是一个很有用的命令，执行一个二分搜索，用来查找哪一次代码提交引入了错误。</p></blockquote><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FlyEWYZF1R8tq_oF5hPeYqRn9Mxn.png" alt></p><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>git bisect start [终点] [起点]</td><td>启动查错，举例：<code>git bisect start HEAD 4d83cf</code></td></tr><tr><td>git bisect good</td><td>标识本次提交没有问题</td></tr><tr><td>git bisect bad</td><td>标识本次提交有问题</td></tr><tr><td>git bisect reset</td><td>退出查错，回到最近一次的代码提交</td></tr></tbody></table><h3 id="指令-diff"><a href="#指令-diff" class="headerlink" title="指令-diff"></a>指令-diff</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>git diff</td><td>查看暂存区和工作区的差异，举例<code>git diff 595d0dc11b6b34668b1620de2c29a313b024092c 1855846d6b49c2f4e3d7a05e4b9d76b9d435b4b9</code></td></tr><tr><td>git diff [file]</td><td>同上，指定文件</td></tr><tr><td>git diff –cached</td><td>查看已暂存的改动，就是暂存区与新版本 HEAD 进行比较</td></tr><tr><td>git diff –staged</td><td>同上</td></tr><tr><td>git diff –cached [file]</td><td>同上，指定文件</td></tr><tr><td>git diff HEAD</td><td>查看已暂存的+未暂存的所有改动，就是与最新版本 HEAD 进行比较</td></tr><tr><td>git diff HEAD~</td><td>同上，与上一个版本比较。HEAD~表示上一个版本，HEAD~10 为最近第 10 个版本</td></tr><tr><td>git diff [id] [id]</td><td>查看两次提交之间的差异</td></tr><tr><td>git diff [branch]</td><td>查看工作区和分支直接的差异</td></tr></tbody></table><h3 id="指令-submodule"><a href="#指令-submodule" class="headerlink" title="指令-submodule"></a>指令-submodule</h3><blockquote><p>子模块是链接；子树是复制的。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/143100657" target="_blank" rel="noopener">使用子模块和子树来管理 Git 项目</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆初始化模块，其中&#123;MOD_NAME&#125;为模块目录，执行后可发现模块目录被清空</span></span><br><span class="line">git submodule deinit &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span></span><br><span class="line">git rm --cached &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 提交更改到代码库，可观察到'.gitmodules'内容发生变更</span></span><br><span class="line">git commit -am <span class="string">"Remove a submodule."</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git submodule deinit -f path/to/submodule</span><br><span class="line">rm -rf .git/modules/path/to/submodule</span><br><span class="line">git rm -f path/to/submodule</span><br></pre></td></tr></table></figure><p><a href="https://murphypei.github.io/blog/2018/09/git-delete-submodule" target="_blank" rel="noopener">Git 删除子模块和远程分支</a></p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h2><ul><li>多建分支，没有什么是新建一个分支无法解决的。</li><li>多提交代码，方便后续如果有问题可以进行快速回滚。</li><li>善于使用变基命令整理没有推送的提交，让提交记录更加整洁。注意 ⚠️<strong>只在从未推送至共用仓库的提交上执行变基命令</strong>。</li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>Git Flow<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fn2kcc6kKLjHaEHQ0Ge_YooUUnov.png" alt></p><h1 id="Git-练习场"><a href="#Git-练习场" class="headerlink" title="Git 练习场"></a>Git 练习场</h1><ul><li>，Git 在线练习。</li><li>，Git 学习网站，通过示例仓库，提供一系列 Git 的小练习，帮助用户掌握这个版本管理工具。</li></ul><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu?view=doc_embed" target="_blank" rel="noopener">Git 入门图文教程(1.5W 字 40 图)🔥</a><br><a href="https://www.yuque.com/kanding/ktech/ai3d3ky8f0dgixto?view=doc_embed" target="_blank" rel="noopener">Git 常用指令集合 🔥🔥</a></p><p><a href="https://www.yuque.com/kanding/ktech/ng8w19?view=doc_embed" target="_blank" rel="noopener">📖ProGit-Git 教程</a></p><p><a href="https://www.yuque.com/xavior.wx/blog/git-review?view=doc_embed&amp;inner=b87ebc48" target="_blank" rel="noopener">git 使用学习总结</a></p><hr><p>最后，重学前端，将思考固定下来。</p><ul><li>笔记和记忆力是提高开发效率的最好方法。</li><li>如果没有对旧事物进行大量练习，你不太可能发现新事物。</li><li>努力学习最感兴趣的东西。<blockquote><p>©️ 版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/songxingguo/devhints/bw0kwn12a6af5yg9" target="_blank" rel="noopener">原文地址-语雀</a></p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何将语雀文章发布到Hexo博客</title>
      <link href="/2023/02/07/%E5%A6%82%E4%BD%95%E5%B0%86%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/02/07/%E5%A6%82%E4%BD%95%E5%B0%86%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>实现语雀上的文章自动化发布到个人博客，首先是因为语雀本身是一个优秀的创作的平台，能方便的编辑和管理文章，但缺点是它本身是一个封闭的系统，就像微信公众号一样，不利于 SEO。其次个人博客是由自己搭建，没有任何限制，也能更好的进行 SEO。基于这两点原因，语雀+个人博客就是一个完美的组合，个人博客作为前台，语雀作为后台，既能很好的创造和管理文章，有能够将需要共享的文章发布到个人博客，供大家搜索。下面要做的就是建立起两者的桥梁。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ul><li><a href="https://github.com/songxingguo/songxingguo.github.io" target="_blank" rel="noopener">项目地址</a></li><li>使用效果（视频）<br><a href="https://www.yuque.com/songxingguo/devhints/gwpsg4dq6tp27z3s?_lake_card=%7B%22status%22%3A%22done%22%2C%22name%22%3A%22%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62023-02-09%2019.39.30.mov%22%2C%22size%22%3A204453355%2C%22taskId%22%3A%22ua4cb8283-502b-4a55-b53e-7f0a9dd0a84%22%2C%22taskType%22%3A%22upload%22%2C%22url%22%3Anull%2C%22cover%22%3Anull%2C%22videoId%22%3A%22inputs%2Fprod%2Fyuque%2F2023%2F394169%2Fmov%2F1675943595043-2a636a15-97b2-4fd2-9038-a34841d5d6a3.mov%22%2C%22download%22%3Afalse%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pqOSi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22video%22%7D#pqOSi" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FvYEuJlUXy5ADawCvwN-yUw1zlI_.com/mdn/prod_resou/afts/img/A*NNs6TKOR3isAAAAAAAAAAABkARQnAQ" alt></a></li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FlChHeNiAySN1-R3hmWCTrVo3BxH.jpeg" alt><br>整体的设计思路是每次语雀更新文档都通过 Webhook 发送钉钉消息，当手动点击【发布】的时候再触发 GithubAction 将 slug 对应的文章从语雀拉取下去并推送到博客仓库，最后部署博客。触发流程虽然是从语雀到 Github 的过程，但开发的过程是优先处理 Github 部分然后再由语雀触发 Webhook，开发过程主要包括以下几个步骤。</p><ol><li>配置<code>yuque-heox-publish</code></li><li>配置<code>.github/workflows/publish.yml</code></li><li>使用云函数触发 GithubAction</li><li>使用云函数推送钉钉消息</li><li>配置语雀 Webhook</li></ol><h3 id="yuque-hexo-publish是什么"><a href="#yuque-hexo-publish是什么" class="headerlink" title="yuque-hexo-publish是什么"></a><code>yuque-hexo-publish</code>是什么</h3><p><code>[yuque-hexo](https://github.com/x-cold/yuque-hexo)</code>是一个很优秀的插件，能将语雀的文章完全<strong>同步</strong>到个人博客上。但这并不满足我的需求，我需要的是发布而不是同步，我并不想把所有文章都<strong>同步</strong>到个人博客上，也不希望只能有一个知识库里面的文章能<strong>发布</strong>到个人博客，而是希望能把我想发布的文章都能<strong>发布</strong>到个人博客上。基于这个这个考虑我在<code>yuque-hexo</code>的基础上新增了发布功能，<code>yuque-hexo-publish</code>就此诞生了。yuque-hexo-publish 在功能上和 yuque-hexo 是完全一致的，只是新增了命令 publish。</p><h2 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h2><h3 id="Hexo-博客开发"><a href="#Hexo-博客开发" class="headerlink" title="Hexo 博客开发"></a>Hexo 博客开发</h3><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><ol><li><code>package.json</code>中配置 yuque-hexo-publish。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"yuqueConfig":</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">"postPath":</span> <span class="string">"source/_posts"</span><span class="string">,</span> <span class="string">//文章目录</span></span><br><span class="line">  <span class="attr">"baseUrl":</span> <span class="string">"https://www.yuque.com/api/v2"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"login":</span> <span class="string">"songxingguo"</span><span class="string">,//用户名</span></span><br><span class="line">  <span class="attr">"repo":</span> <span class="string">"devhints"</span><span class="string">,</span> <span class="string">//知识库名称</span></span><br><span class="line">  <span class="attr">"onlyPublished":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"onlyPublic":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"imgCdn":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"concurrency":</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"imageBed":</span> <span class="string">"github"</span><span class="string">,</span> <span class="string">//图床类型</span></span><br><span class="line">    <span class="attr">"enabled":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"bucket":</span> <span class="string">"songxingguo.github.io"</span><span class="string">,</span> <span class="string">//仓库地址</span></span><br><span class="line">    <span class="attr">"prefixKey":</span> <span class="string">"static/images"</span> <span class="string">//图片文件上传到仓库后的目录</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>更详细的配置说明可以查看<code>[yuque-hexo-publish](https://github.com/songxingguo/yuque-hexo/tree/feature-publish)</code>。</p><ol start="2"><li><code>package.json</code>中添加任务脚本。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">  <span class="string">"pulish"</span>: <span class="string">"yuque-hexo publish"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>根目录下新建<code>.github/workflows/publish.yml</code>。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[repository_dispatch]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">"12.0.0"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">and</span> <span class="string">Build</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">YUQUE_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.YUQUE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SLUG:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.client_payload.slug</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SECRET_ID:</span> <span class="string">songxingguo</span></span><br><span class="line">          <span class="attr">SECRET_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">publish</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置Git用户名邮箱</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"songxingguo"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"1328989942@qq.com"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">提交yuque拉取的文章到GitHub仓库</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"feat:提交文章"</span> <span class="string">-a</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送文章到仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">CLEAN:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>YUQUE_TOKE</code>和<code>ACCESS_TOKEN</code>都是 Github 的环境变量，<code>github.event.client_payload.slug</code>是<code>[repository_dispatch](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#repository_dispatch)</code>事件中传递的参数。</p><h4 id="如何本地调试"><a href="#如何本地调试" class="headerlink" title="如何本地调试"></a>如何本地调试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUQUE_TOKEN=xxx SLUG=xxx yuque-hexo publish</span><br></pre></td></tr></table></figure><p><code>yuque-hexo publish</code>需要两个环境变量，<code>YUQUE_TOKEN</code>是语雀的<a href="https://www.yuque.com/settings/tokens" target="_blank" rel="noopener">授权码</a>，<code>SLUG</code>是语雀文章的 id。</p><h3 id="阿里云函数开发"><a href="#阿里云函数开发" class="headerlink" title="阿里云函数开发"></a>阿里云函数开发</h3><h4 id="初始化云函数"><a href="#初始化云函数" class="headerlink" title="初始化云函数"></a>初始化云函数</h4><ol><li>创建一个处理 http 请求的 node.js 云函数，<a href="https://fcnext.console.aliyun.com/cn-hangzhou/tasks" target="_blank" rel="noopener">云函数创建地址</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FmgXhivkd1GDSXivmeXk4GFgJ5mW.png" alt></p><ol start="2"><li>创建好后的效果如下。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fn9FBWVuiHojlCDdNBudsnalwEXs.png" alt></p><h4 id="调试云函数"><a href="#调试云函数" class="headerlink" title="调试云函数"></a>调试云函数</h4><ol><li>配置测试请求。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FrNF5Qqv5Z8c-GdIRsTEUU9fR6Rq.png" alt></p><ol start="2"><li>部署代码之后，点击【测试函数】，就可以看到日志输出。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fm13C_KkS6MOfXCgdToHQqHVS7-p.png" alt></p><h4 id="使用云函数触发-GithubAction"><a href="#使用云函数触发-GithubAction" class="headerlink" title="使用云函数触发 GithubAction"></a>使用云函数触发 GithubAction</h4><p>这个函数是通过 Get 请求进行调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//xx-xx-opbwmocbhe.cn-hangzhou.fcapp.run?slug=$&#123;slug&#125;`</span></span><br></pre></td></tr></table></figure><p>首先需要从参数中获取 slug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slug = params.queries.slug;</span><br></pre></td></tr></table></figure><p>然后使用<code>[repository_dispatch](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#repository_dispatch)</code>事件触发 GithubAction，并将<code>slug</code>传给<code>client_payload</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"https://api.github.com/repos/songxingguo/songxingguo.github.io/dispatches"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    Accept: <span class="string">"application/vnd.github+json"</span>,</span><br><span class="line">    Authorization: <span class="string">"Bearer GITHUB_TOKEN"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123; <span class="attr">event_type</span>: <span class="string">"publish"</span>, <span class="attr">client_payload</span>: &#123; slug &#125; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .request(options)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>其中<code>GITHUB_TOKEN</code>是 github 的授权码，获取和配置可以参考<a href="https://www.yuque.com/songxingguo/devhints/tfub27hk86lsdrpb" target="_blank" rel="noopener">使用 Github Action 部署静态网站</a>。<code>event_type</code>是活动类型这个和<code>.github/workflows/publish.yml</code>里面的<code>types</code>是一一对应的，如果<code>.github/workflows/publish.yml</code>中没有指定具体<code>types</code>，那这儿填任何值都是可以。更多信息可以查看<a href="https://docs.github.com/zh/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository_dispatch" target="_blank" rel="noopener">详细配置</a>。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FveEzFT5TggObDiemqVIn5zlRzAd.png" alt><br>完整代码如下。</p><blockquote><p>需要注意 ⚠️ 异步执行的问题，可以通过<code>async-await</code>保证请求是在<code>resp.send</code>之前执行的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"><span class="keyword">var</span> getRawBody = <span class="built_in">require</span>(<span class="string">"raw-body"</span>);</span><br><span class="line"><span class="keyword">var</span> getFormBody = <span class="built_in">require</span>(<span class="string">"body/form"</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">require</span>(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">To enable the initializer feature (https://help.aliyun.com/document_detail/156876.html)</span></span><br><span class="line"><span class="comment">please implement the initializer function as below：</span></span><br><span class="line"><span class="comment">exports.initializer = (context, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log('initializing');</span></span><br><span class="line"><span class="comment">  callback(null, '');</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">req, resp, context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    path: req.path,</span><br><span class="line">    queries: req.queries,</span><br><span class="line">    headers: req.headers,</span><br><span class="line">    method: req.method,</span><br><span class="line">    requestURI: req.url,</span><br><span class="line">    clientIP: req.clientIP,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getRawBody(req, <span class="keyword">async</span> (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> req.queries) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = req.queries[key];</span><br><span class="line">      resp.setHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">    params.body = body.toString();</span><br><span class="line">    <span class="keyword">const</span> slug = params.queries.slug;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"slug"</span>, slug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      method: <span class="string">"POST"</span>,</span><br><span class="line">      url: <span class="string">"https://api.github.com/repos/songxingguo/songxingguo.github.io/dispatches"</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        Accept: <span class="string">"application/vnd.github+json"</span>,</span><br><span class="line">        Authorization: <span class="string">"Bearer xxx"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      data: &#123; <span class="attr">event_type</span>: <span class="string">"publish"</span>, <span class="attr">client_payload</span>: &#123; slug &#125; &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">      .request(options)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    resp.send(<span class="built_in">JSON</span>.stringify(params, <span class="literal">null</span>, <span class="string">"    "</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用云函数推送钉钉消息"><a href="#使用云函数推送钉钉消息" class="headerlink" title="使用云函数推送钉钉消息"></a>使用云函数推送钉钉消息</h4><h5 id="调试钉钉消息类型及数据格式"><a href="#调试钉钉消息类型及数据格式" class="headerlink" title="调试钉钉消息类型及数据格式"></a>调试钉钉消息类型及数据格式</h5><ol><li>创建钉钉机器人，并复制 webhook 地址。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FhiBRGA1W_Z4-GzqzjiH5esIggKG.png" alt></p><ol start="2"><li>打开<a href="https://hoppscotch.io/" target="_blank" rel="noopener">在线接口调试工具</a>，输入 Webhook 地址，配置钉钉<a href="https://open.dingtalk.com/document/robots/custom-robot-access#title-72m-8ag-pqw" target="_blank" rel="noopener">消息类型及数据格式</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FqEYt6cimbEW4pJDET2YEsevO3bQ.png" alt></p><ol start="3"><li>调试到自己想要的效果后复制请求的代码。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FqxbJqsBt0_l1REj_8luZiqzFBxH.png" alt></p><hr><p>这个函数是通过 post 请求进行调用，首先需要从请求体中获取<code>slug</code>和<code>title</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(params.body);</span><br><span class="line"><span class="keyword">const</span> &#123; slug, title &#125; = data.data;</span><br></pre></td></tr></table></figure><p>然后再请求钉钉机器人的 Webhook 地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"https://oapi.dingtalk.com/robot/send"</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    access_token: <span class="string">""</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  headers: &#123; <span class="string">"content-type"</span>: <span class="string">"application/json"</span> &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msgtype: <span class="string">"actionCard"</span>,</span><br><span class="line">    actionCard: &#123;</span><br><span class="line">      title: <span class="string">"文档发布"</span>,</span><br><span class="line">      text: <span class="string">`<span class="subst">$&#123;title&#125;</span>`</span>,</span><br><span class="line">      btnOrientation: <span class="string">"0"</span>,</span><br><span class="line">      btns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"发布"</span>,</span><br><span class="line">          actionURL: <span class="string">`https://xx-xx-xx.cn-hangzhou.fcapp.run?slug=<span class="subst">$&#123;slug&#125;</span>`</span>,</span><br><span class="line">        &#125;, <span class="comment">// 触发GithubAction云函数的公网地址</span></span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"Actions"</span>,</span><br><span class="line">          actionURL:</span><br><span class="line">            <span class="string">"https://github.com/songxingguo/songxingguo.github.io/actions"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .request(options)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>其中<code>access_token</code>为钉钉 webhook 地址中的授权码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//oapi.dingtalk.com/robot/send?access_token=xx</span></span><br></pre></td></tr></table></figure><p>最终的效果如下所示。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FgwZMGzVe6xjsIMMsYyDrVxql0ku.png" alt><br>完整代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getRawBody = <span class="built_in">require</span>(<span class="string">"raw-body"</span>);</span><br><span class="line"><span class="keyword">var</span> getFormBody = <span class="built_in">require</span>(<span class="string">"body/form"</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">require</span>(<span class="string">"body"</span>);</span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">To enable the initializer feature (https://help.aliyun.com/document_detail/156876.html)</span></span><br><span class="line"><span class="comment">please implement the initializer function as below：</span></span><br><span class="line"><span class="comment">exports.initializer = (context, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log('initializing');</span></span><br><span class="line"><span class="comment">  callback(null, '');</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">req, resp, context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    path: req.path,</span><br><span class="line">    queries: req.queries,</span><br><span class="line">    headers: req.headers,</span><br><span class="line">    method: req.method,</span><br><span class="line">    requestURI: req.url,</span><br><span class="line">    clientIP: req.clientIP,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getRawBody(req, <span class="keyword">async</span> (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> req.queries) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = req.queries[key];</span><br><span class="line">      resp.setHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">    params.body = body.toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(params.body);</span><br><span class="line">    <span class="keyword">const</span> &#123; slug, title &#125; = data.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"slug"</span>, slug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      method: <span class="string">"POST"</span>,</span><br><span class="line">      url: <span class="string">"https://oapi.dingtalk.com/robot/send"</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        access_token: <span class="string">""</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: &#123; <span class="string">"content-type"</span>: <span class="string">"application/json"</span> &#125;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msgtype: <span class="string">"actionCard"</span>,</span><br><span class="line">        actionCard: &#123;</span><br><span class="line">          title: <span class="string">"文档发布"</span>,</span><br><span class="line">          text: <span class="string">`<span class="subst">$&#123;title&#125;</span>`</span>,</span><br><span class="line">          btnOrientation: <span class="string">"0"</span>,</span><br><span class="line">          btns: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"发布"</span>,</span><br><span class="line">              actionURL: <span class="string">`https://xx-xx-xx.cn-hangzhou.fcapp.run?slug=<span class="subst">$&#123;slug&#125;</span>`</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Actions"</span>,</span><br><span class="line">              actionURL:</span><br><span class="line">                <span class="string">"https://github.com/songxingguo/songxingguo.github.io/actions"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">      .request(options)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    resp.send(<span class="built_in">JSON</span>.stringify(params, <span class="literal">null</span>, <span class="string">"    "</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="配置语雀-Webhook"><a href="#配置语雀-Webhook" class="headerlink" title="配置语雀 Webhook"></a>配置语雀 Webhook</h4><p>进入语雀<a href="https://www.yuque.com/songxingguo/devhints/settings/webhooks" target="_blank" rel="noopener">webhook 配置页面</a>，填写名称和<strong>推送钉钉消息</strong>云函数的公网地址，并选择<strong>更新文档</strong>时触发。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fmtzly3_0hghg_uvqaK6eDgmsT-M.png" alt></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Hoppscotch"><a href="#Hoppscotch" class="headerlink" title="Hoppscotch"></a><a href="https://hoppscotch.io/" target="_blank" rel="noopener">Hoppscotch</a></h3><p>Hoppscotch 和 postman 的功能是一样的，但这个是线上的版本，更加的方便。有时请求会出现请求无法到达的问题，需要配置插件代理，将请求的域名加入到插件中。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FkPke4qlMP1Zv2PALiW8f-dAATr5.png" alt></p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a><a href="https://www.yuque.com/songxingguo/devhints/gwpsg4dq6tp27z3s" target="_blank" rel="noopener">拓展阅读</a></h2><p><a href="https://www.yuque.com/1874w/1874.cool/ovugli?view=doc_embed" target="_blank" rel="noopener">Github Actions 持续集成 Docker 构建并部署 Node 项目到云服务器</a></p><p><a href="https://github.com/LetTTGACO/yuque-hexo-example" target="_blank" rel="noopener">yueque-hexo 图床配置</a></p><p><a href="https://www.yuque.com/1874w/1874.cool/roeayv?view=doc_embed" target="_blank" rel="noopener">语雀云端写作 Hexo+Github Actions+COS 持续集成</a><br><a href="https://www.yuque.com/yuque/developer/doc-webhook?view=doc_embed" target="_blank" rel="noopener">Webhooks</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建在线个人简历</title>
      <link href="/2023/02/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2023/02/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>做这个在线简历是出于两点考虑。</p><ul><li>word 文档式的简历没有办法展示到网上，不能体现我作为一个前端开发工程师的专长。</li><li>之前也写过一个在线简历，但是现在不好维护了。主要原因是之前使用 Webpack 打包，对于一个简历的小项目来说比较重。然后之前的图床是使用七牛云进行存储的，但现在七牛云所有域名都需要备案，我之前的域名地址也被莫名其妙（😡）的被删除了，已经无力去维护。如果后面有时间和精力再进行升级优化吧。</li></ul><p>基于上面的两点考虑，我决定做一个简单的且易于维护的在线简历。这次打包采用了开箱即用的<a href="https://parceljs.org/" target="_blank" rel="noopener">parceljs</a>，对于在线简历这个小项目正好合适。而且这次简历依然是使用了模版引擎<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ejs</a>，让数据和模版分离，通过 json 文件来配置简历，在设计思想上这个参考了<a href="https://jsonresume.org/" target="_blank" rel="noopener">Json-Resume</a>，在样式上参考了<a href="https://shoyuf.top/resume" target="_blank" rel="noopener">SHOYUF</a>的简历。</p><a id="more"></a><h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><ul><li>如果不想从零开始配置就可以直接下载<code>[example](https://github.com/sarscode/parcel-transformer-ejs)</code>运行。</li><li>该项目的<a href="https://github.com/songxingguo/resume" target="_blank" rel="noopener">开源地址</a>在 github 上，分支为<code>feature-ejs</code>。</li><li>如果想将简历发布到线上可以参考<a href="https://www.yuque.com/songxingguo/devhints/tfub27hk86lsdrpb" target="_blank" rel="noopener">使用 Github Action 部署静态网站</a>。</li></ul><h2 id="从零开始搭建一个-MVP-项目"><a href="#从零开始搭建一个-MVP-项目" class="headerlink" title="从零开始搭建一个 MVP 项目"></a>从零开始搭建一个 MVP 项目</h2><h3 id="安装和配置parcel"><a href="#安装和配置parcel" class="headerlink" title="安装和配置parcel"></a>安装和配置<code>parcel</code></h3><ol><li>创建一个 resume 文件夹</li><li>使用 <code>npm init</code>初始化<code>package.json</code>，全部都选择默认选项。</li><li>安装<code>parcel</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev parcel</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>package.json</code>中添加任务脚本</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "parcel",</span><br><span class="line">    "build": "parcel build"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>新建 src 目录，并在目录下新建<code>index.ejs</code>文件，并在<code>index.ejs</code>中添加内容。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello parcel！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello parcel!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在配置<code>package.json</code>中配置 parcel 的入口文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"source": "src/index.ejs",</span><br></pre></td></tr></table></figure><h3 id="安装和配置parcel-transformer-ejs"><a href="#安装和配置parcel-transformer-ejs" class="headerlink" title="安装和配置parcel-transformer-ejs"></a>安装和配置<code>parcel-transformer-ejs</code></h3><ol start="6"><li>安装<code>parcel-transformer-ejs</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D parcel-transformer-ejs</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/parcel-transformer-ejs" target="_blank" rel="noopener">parcel-transformer-ejs</a> 是一个 ejs 转换器，将 ejs 转换成 html，这个库唯一的缺点就是修改了 json 配置文件之后，页面并没有更新，对开发效率还是影响蛮大的。</p><blockquote><p>现在的解决办法是，修改了<code>.ejsrc</code>再立即修改一下<code>index.ejs</code>就会更新页面了。</p></blockquote><ol start="7"><li>在根目录下新建<code>.parcelrc</code>，配置<a href="https://parceljs.org/" target="_blank" rel="noopener">parcel</a>转换器。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"@parcel/config-default"</span>],</span><br><span class="line">  <span class="attr">"transformers"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.ejs"</span>: [<span class="string">"parcel-transformer-ejs"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>在 src 目录下新建<code>.ejsrc</code>作为<strong>简历配置</strong>文件，json 格式可以参考<a href="https://jsonresume.org/schema/" target="_blank" rel="noopener">jsonresume</a>。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"basics"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">    <span class="attr">"label"</span>: <span class="string">"Programmer"</span>,</span><br><span class="line">    <span class="attr">"image"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"john@gmail.com"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"(912) 555-4321"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://johndoe.com"</span>,</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"A summary of John Doe…"</span>,</span><br><span class="line">    <span class="attr">"location"</span>: &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"2712 Broadway St"</span>,</span><br><span class="line">      <span class="attr">"postalCode"</span>: <span class="string">"CA 94115"</span>,</span><br><span class="line">      <span class="attr">"city"</span>: <span class="string">"San Francisco"</span>,</span><br><span class="line">      <span class="attr">"countryCode"</span>: <span class="string">"US"</span>,</span><br><span class="line">      <span class="attr">"region"</span>: <span class="string">"California"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profiles"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"Twitter"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"john"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://twitter.com/john"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"work"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="string">"President"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://company.com"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2014-01-01"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Started the company"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"volunteer"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"organization"</span>: <span class="string">"Organization"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="string">"Volunteer"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://organization.com/"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2012-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Awarded 'Volunteer of the Month'"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"education"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"institution"</span>: <span class="string">"University"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://institution.com/"</span>,</span><br><span class="line">      <span class="attr">"area"</span>: <span class="string">"Software Development"</span>,</span><br><span class="line">      <span class="attr">"studyType"</span>: <span class="string">"Bachelor"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2011-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"score"</span>: <span class="string">"4.0"</span>,</span><br><span class="line">      <span class="attr">"courses"</span>: [<span class="string">"DB1101 - Basic SQL"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"awards"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Award"</span>,</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2014-11-01"</span>,</span><br><span class="line">      <span class="attr">"awarder"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"There is no spoon."</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"certificates"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Certificate"</span>,</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2021-11-07"</span>,</span><br><span class="line">      <span class="attr">"issuer"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://certificate.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"publications"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Publication"</span>,</span><br><span class="line">      <span class="attr">"publisher"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"releaseDate"</span>: <span class="string">"2014-10-01"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://publication.com"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"skills"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Web Development"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"Master"</span>,</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"JavaScript"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"languages"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"English"</span>,</span><br><span class="line">      <span class="attr">"fluency"</span>: <span class="string">"Native speaker"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"interests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Wildlife"</span>,</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"Ferrets"</span>, <span class="string">"Unicorns"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"references"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Jane Doe"</span>,</span><br><span class="line">      <span class="attr">"reference"</span>: <span class="string">"Reference…"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Project"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Won award at AIHacks 2016"</span>],</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"HTML"</span>],</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2019-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2021-01-01"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://project.com/"</span>,</span><br><span class="line">      <span class="attr">"roles"</span>: [<span class="string">"Team Lead"</span>],</span><br><span class="line">      <span class="attr">"entity"</span>: <span class="string">"Entity"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"application"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>修改一下<code>index.ejs</code>，添加一些<a href="https://www.yuque.com/songxingguo/devhints/xnf7wu5wxoucphtg" target="_blank" rel="noopener">ejs 语法</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;Hello EJS！&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;&lt;%= basics.name %&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>最后，你就能运行它了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以开发模式运行</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以生成模式运行</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>下面是运行效果。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FohM8kpQxrzWA2KnUa7KGYQPG_5s.png" alt></p><h2 id="一些小优化"><a href="#一些小优化" class="headerlink" title="一些小优化"></a>一些小优化</h2><h3 id="加粗文字或者添加链接"><a href="#加粗文字或者添加链接" class="headerlink" title="加粗文字或者添加链接"></a>加粗文字或者添加链接</h3><ol><li>在文本中添加标签。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"basics"</span>: &#123;</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"A &lt;b&gt;summary&lt;/b&gt; of &lt;a href='https://www.songxingguo.com/'&gt;John Doe&lt;/a&gt;…"</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>输出是使用<code>&lt;%-</code>可以不转义 html。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- basics.summary %&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>效果如下。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fu-fmOUIpyTJCfvtcquiD09XdaBq.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Action部署静态网站</title>
      <link href="/2023/01/15/%E4%BD%BF%E7%94%A8Github%20Action%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/2023/01/15/%E4%BD%BF%E7%94%A8Github%20Action%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h2><ol><li>进入 Github 生成<a href="https://github.com/settings/apps" target="_blank" rel="noopener">授权 token 的页面</a>，创建一个 token，修改名称并选择所有仓库。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FpT1FXfdY0l7BGM5m1bJf8CpX2vJ.png" alt></p><a id="more"></a><ol start="2"><li>将仓库权限设置中的 Content 项，设置为读和写。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fq0KQlr3rLfbLvpcG3eeBuR3obCM.png" alt></p><ol start="3"><li>最后点击确认生成 token，并<strong>复制</strong>，<strong>注意 ⚠️ 刷新之后就没有办法复制了</strong>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fv9aHq1-NNLTVgSUqUFagqiuXnKq.png" alt></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ol><li>进入到<strong>项目</strong>设置页面，选择添加<a href="https://github.com/songxingguo/resume/settings/secrets/actions" target="_blank" rel="noopener">Actions 的环境变量</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FrIY5Jtbgpf4f6dVbJw05tgPrnLU.png" alt></p><ol start="2"><li>输入变量名称<code>ACCESS_TOKEN</code>，密钥一栏粘贴刚才复制的 Token，点击添加就完成了。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fl6OpNuIfRyDofKm-aKoQSfW8LAr.png" alt></p><h2 id="项目中添加配置文件"><a href="#项目中添加配置文件" class="headerlink" title="项目中添加配置文件"></a>项目中添加配置文件</h2><ol><li>在项目的更目录下创建<code>.github/workflows/static.yml</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Build and Deploy</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main #触发自动化部署的分支</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout 🛎️ #从触发分支检出代码</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">        <span class="keyword">with</span>:</span><br><span class="line">          persist-credentials: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      - name: Install and Build 🔧 #安装依赖并且打包静态文件</span><br><span class="line">        run: |</span><br><span class="line">          npm i</span><br><span class="line">          npm run build</span><br><span class="line">      - name: Deploy 🚀</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        <span class="keyword">with</span>:</span><br><span class="line">          ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">          BRANCH: gh-pages #部署的分支</span><br><span class="line">          FOLDER: dist #打包后静态文件所在的位置</span><br><span class="line">          CLEAN: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后提交代码就开始自动部署了。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FtBuIbPHuD4YxSJImJg7yFsektPM.png" alt></p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
