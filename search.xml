<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VSCode指令速查🚀</title>
      <link href="/2023/07/08/VSCode%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/07/08/VSCode%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FmUabHtqOAPi4hA9p85mwe7O3n0i.jpeg" alt><br>工欲善其事，必先利其器。VSCode 作为一款集成开发工具具有轻量级，高度可定制化的特点。它拥有各种插件，并且免费，非常适合喜欢折腾的同学。而本篇文章就是为大家推荐一些 VSCode 使用过程中的最佳实践，通过这些实践，希望能帮助大家进步提供开发效率。下面我将从编辑器的前期设置和后期开发两个角度展开。</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>首先在进行具体设置之前，我们要对 VSCode 设置有一个初步的认识。VSCode 的设置分为用户设置和工作区设置。</p><ul><li>用户设置是一个全局范围的设置，会应用到所有的 Visual Studio Code 实例中。</li><li>工作区设置存放于每个项目<code>.vscode</code>文件夹下的 settings.json 文件中，只会对相应的工作区生效。一个工作区内是可以包含多个项目的。工作区的设置优先级高于用户设置，两者同时存在时，工作区设置会覆盖掉用户设置。此外，可以通过工作区设置在团队成员之间共享。一般来说，工作区设置也会被提交到 Git 仓库中。</li></ul><p>设置可以使用快捷<code>Cmd+,</code> 的方式打开，也可以切换到 JSON 格式进行快速编辑。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷能很大程度上提高我们的开发效率，那么对快捷键的配置也是不可少的部分，但快捷键的记忆却不是一件容易事情，下面将通过使用场景对快捷键进行分类整理方式，来提高快捷键的记忆效率。</p><h3 id="常用快捷键warning"><a href="#常用快捷键warning" class="headerlink" title="常用快捷键warning"></a>常用快捷键warning</h3><p>打开快捷编辑面板：<code>Cmd+K→Cmd+S</code><br>| <strong>Mac 快捷键</strong> | <strong>描述</strong> | <strong>来源</strong> |<br>| — | — | — |<br>| <strong>通用快捷键</strong> | | |<br>| <code>Cmd+,</code> | 打开用户设置 | |<br>| <code>Cmd+Shift+P或F1</code> | 打开命令面板 | |<br>| <strong>窗口</strong> | | |<br>| <code>Cmd+Shift+N</code> | 新建一个 Visual Studio Code 窗口 | |<br>| <code>Cmd+W</code> | 关闭当前窗口 | |<br>| <code>Cmd+Shift+T</code> | 重新打开最新关闭的窗口 | |<br>| <strong>跳转</strong> | | |<br>| <code>Cmd+P</code> | 文件跳转 | 用户 |<br>| <code>Option+←/→</code> | 向后/向前跳转 | |<br>| <strong>基本编辑</strong> | | |<br>| <code>Cmd+X</code> | 剪切当前行（当没有选定任何文本时） | |<br>| <code>Cmd+C</code> | 复制当前行（当没有选定任何文本时） | |<br>| <code>Option+↑/↓</code> | 把当前行的内容向上/下移动 | |<br>| <code>Shift+Option+↑/↓</code> | 把当前行的内容向上/下复制 | |<br>| <code>Cmd+/</code> | 添加或删除当前行的注释 | |<br>| <strong>编程语言编辑</strong> | | |<br>| <code>Cmd+Shift+F</code> | 格式化文档 | 用户 |<br>| <code>Cmd+K Cmd+F</code> | 格式化选定内容 | |<br>| <strong>搜索与替换</strong> | | |<br>| <code>Cmd+F</code> | 文件搜索 | |<br>| <code>Cmd+H</code> | 文件替换 | 用户 |<br>| <code>Cmd+Shift+F</code> | 文件搜索 | 用户 |<br>| <code>Cmd+Shift+H</code> | 全局替换 | |<br>| <strong>多光标与选择</strong> | | |<br>| <code>Option+Click</code> | 插入一个新的光标 | |<br>| <code>Shift+Option+→</code> | 扩大选中的范围 | |<br>| <code>Shift+Option+←</code> | 缩小选中的范围 | |<br>| <code>Option+←/→</code> | 光标移动到当前行的起始/末尾 | |<br>| <strong>显示</strong> | | |<br>| <code>Ctrl+Cmd+F</code> | 切换全屏模式 | |<br>| <code>Cmd+=</code> | 放大 | |<br>| <code>Cmd+-</code> | 缩小 | |<br>| <strong>编辑器管理</strong> | | |<br>| <code>Cmd+\\</code> | 分割编辑器 | |<br>| <code>Cmd+1/2/3</code> | 把焦点移动到不同的编辑器组 | |<br>| <strong>文件管理</strong> | | |<br>| <code>Cmd+N</code> | 新建文件 | |<br>| <code>Cmd+O</code> | 打开文件 | |<br>| <code>Cmd+S</code> | 保存 | |<br>| <code>Cmd+Shift+S</code> | 另存为 | |<br>| <code>Ctrl+Shift+←/→</code> | 打开前一个/下一个文件 | |</p><h3 id="显示用户快捷键"><a href="#显示用户快捷键" class="headerlink" title="显示用户快捷键"></a>显示用户快捷键</h3><p>很多时候默认的快捷键，并不能很好的满足我们的使用习惯，就需要对快捷进行调整，具体哪些快捷键进行了修改就可以通过下面的筛选显示出来。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fn0QyQvmIwHUa7uznVRiqNZSfZ0q.png" alt></p><h3 id="快捷键大全warning"><a href="#快捷键大全warning" class="headerlink" title="快捷键大全warning"></a>快捷键大全warning</h3><p>打开快捷键大全：<code>Cmd+K→Cmd+R</code></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>VSCode 的<a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">插件市场</a>纷繁复杂，种类繁多，但不是每一个插件都是我们需要的，下面就为大家列举出了一些常用并且好用的插件供大家选择。</p><table><thead><tr><th><strong>插件</strong></th><th><strong>描述</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td><code>Chinese (Simplified)</code></td><td>简体中文</td><td></td></tr><tr><td><strong>HTML 必备</strong></td><td></td><td></td></tr><tr><td><code>Auto Close Tag</code></td><td>标签自动闭合</td><td></td></tr><tr><td><code>Auto Rename Tag</code></td><td>标签自动重命名</td><td></td></tr><tr><td><code>Highlight Matching Tag</code></td><td>高亮对应 HTML 标签 &amp; 表示对应括号</td><td></td></tr><tr><td><code>Live Server</code></td><td>代码保存后，浏览器自动更新</td><td></td></tr><tr><td><strong>Vue 必备</strong></td><td></td><td></td></tr><tr><td><code>[Vue Language Features (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.volar)</code>🌟</td><td><code>Vetur</code>的升级版。提供语法高亮，Emmet 支持，格式化代码，错误检查，自动补全等功能，以及高级功能。</td></tr><tr><td><a href="https://juejin.cn/post/6966106927990308872" target="_blank" rel="noopener">Volar - vue 终极开发神器！ - 掘金</a></td></tr></tbody></table><ul><li><a href="https://vuejs.org/" target="_blank" rel="noopener">vuejs.org</a> 出品<br>|<br>| <a href="https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin" target="_blank" rel="noopener">TypeScript Vue Plugin (Volar)</a>🌟 | | |<br>| <code>[Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)</code> | 提供语法高亮，Emmet 支持，格式化代码，错误检查，自动补全等功能 | |<br>| <code>[Vue VSCode Snippets](https://marketplace.visualstudio.com/items?itemName=sdras.vue-vscode-snippets)</code> | | |<br>| <strong>代码检查</strong> | | |<br>| <code>[ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)</code> | JavaScript 代码检查 | <a href="https://juejin.cn/post/6959825653029928968" target="_blank" rel="noopener">一文彻底读懂 ESLint - 掘金</a> |<br>| <code>[stylelint](https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint)</code> | css/sass/less 代码检查 | |<br>| <strong>代码格式化</strong> |<br>| |<br>| <code>[Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)</code>🌟 | 格式化插件<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FodBLJYMqXmNo2Y-I-aUvTMfC-8y.png" alt> | |<br>| <code>Beautify</code> | 格式化插件<br>支持语言：Javascript, JSON, CSS, Sass, and HTML | |<br>| <strong>智能提示</strong> | | |<br>| <code>npm Intellisense</code> | npm 智能提示 | |<br>| <code>Path Intellisense</code> | 路径智能提示，自动导入 | |<br>| <code>path prompt</code> | 路径图片预览 | |<br>| <strong>Git</strong> | | |<br>| <code>[GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)</code>🌟 | 预览每一行的提交记录以及代码提交树 |</li><li><a href="https://gitkraken.com/" target="_blank" rel="noopener">gitkraken.com</a> 出品<br>|<br>| <code>[Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)</code> | 文件提交历史<br>| |<br>| <code>[Git Graph](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)</code> | 可视化显示 Git 提交树<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FiHlwVkc14NgOGjiXMI77K44ojVO.gif" alt> | |<br>| <strong>Github</strong> |<br>| |<br>| <code>[GitHub Actions](https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-github-actions)</code> | | |<br>| <code>GitHub Copilot</code> | | 收费 |<br>| <strong>AI</strong> | | |<br>| <a href="https://marketplace.visualstudio.com/items?itemName=WhenSunset.chatgpt-china" target="_blank" rel="noopener">ChatGPT - 中文版</a> | | |<br>| <strong>主题</strong> | | |<br>| <a href="https://marketplace.visualstudio.com/items?itemName=Catppuccin.catppuccin-vsc-icons" target="_blank" rel="noopener">Catppuccin Icons for VSCode</a> 🌟 | 文件图标<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fj6r3ym70-24GVQYX1ZiMsaKmrZM.png" alt> | |<br>| <code>[vscode-icons](https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons)</code> | 文件图标<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fpc4XocfmcQRVAhTLY-9Z7awzK7B.gif" alt> | |<br>| <code>[Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2)</code>🌟 | 彩色的括号<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FvAnIUgBzX957oTMiX8O7SlY4J7r.png" alt> |</li><li>已经内置，只需要开启<br>|<br>| <code>[Webstorm IntelliJ Darcula Theme](https://marketplace.visualstudio.com/items?itemName=xr0master.webstorm-intellij-darcula-themehttps://marketplace.visualstudio.com/items?itemName=xr0master.webstorm-intellij-darcula-theme)</code>🌟 | Webstorm 一样的主题<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FiCBqMi2xDUc2BlPfWsfwIbM0txs.png" alt> | |<br>| <strong>其他</strong> | | |<br>| <code>[background](https://marketplace.visualstudio.com/items?itemName=shalldie.background)</code>🌟 | 界面右下角有个小人 | |<br>| <code>carbon-now-sh</code> | 截获代码为 PNG，Ctrl+Shift+P =&gt; Carbon | |<br>| <code>Settings Sync</code> | 设置同步 | |</li></ul><h2 id="同步设置"><a href="#同步设置" class="headerlink" title="同步设置"></a>同步设置</h2><p>对于开发来说一般都会有两台电脑，一台在公司，一台在家里，当我们辛苦的在公司电脑上的配置好了快捷键和插件，难道回到家中还需要再重新配置一次吗？当然是不需要的，我们可以通过官方账号的同步机制来进行多台设备间配置的同步，具体步骤如下。</p><ol><li>首先登录账号并打开设置同步功能。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fq4r1p4Vnom5fGQ9_uK-2amxfziP.png" alt></p><ol start="2"><li>然后选择要需要同步的内容。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FoSiG5lJ_-eNJ8DfF4xR1S21TPAH.png" alt>warning<br>【<strong>选项含义</strong>】</p><ul><li><strong>Settings</strong>（配置）</li><li><strong>Keyboard Shortcuts</strong>（快捷键）</li><li><strong>Extensions</strong>（插件）</li><li><strong>User Snippets</strong>（用户代码片段）</li><li><strong>UI State</strong>（界面状态）</li></ul><ol start="3"><li>最后，在另外一台电脑上登录同一个账号，就可以同步电脑上的所有配置内容。</li></ol><p><a href="https://juejin.cn/post/7066622158184644621" target="_blank" rel="noopener">VSCode 官方的配置同步方案 - 掘金</a></p><h2 id="统一环境"><a href="#统一环境" class="headerlink" title="统一环境"></a>统一环境</h2><p>当团队成员之间进行协同开发的时候，往往会遇到大家的配置不同问题，比如格式化的方式不同，就会导致最后代码大面积冲突。为了解决这个问题就可以采用上文提到的工作区设置来实现不同团队成员间配置的同步。具体步骤如下。</p><ol><li>首先，在 <code>.vscode</code>下创建文件<code>extensions.json</code>和<code>settings.json</code>，并提交代码到 Git 仓库。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FjSuc42FQacUBzzKlK6XlkxltVmr.png" alt></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"recommendations"</span>: [</span><br><span class="line">    <span class="string">"dbaeumer.vscode-eslint"</span>,</span><br><span class="line">    <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">    <span class="string">"octref.vetur"</span>,</span><br><span class="line">    <span class="string">"formulahendry.auto-close-tag"</span>,</span><br><span class="line">    <span class="string">"formulahendry.auto-rename-tag"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后项目成员拉取代码后，在搜索框中输入<code>@recommended</code>就会显示工作区推荐的插件，项目成员下载并安装好这些插件，就能实现不同成员之间开发环境的统一。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FsVd2-8e-YYq34wWo_xFmsRNSlqP.png" alt><br><a href="https://lleohao.github.io/2019/09/23/%E5%A6%82%E4%BD%95%E5%9C%A8-vscode-%E4%B8%AD%E5%85%B1%E4%BA%AB%E5%9B%A2%E9%98%9F%E9%97%B4%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%92%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">如何在 vscode 中共享团队间的项目配置和插件配置</a></p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="自定义代码模版"><a href="#自定义代码模版" class="headerlink" title="自定义代码模版"></a>自定义代码模版</h2><p>在开发的过程中，往往我们会遇到一些重复的代码，比如创建一个初始的 Vue 文件，如果每次都手敲那是很慢的，我们就可以把那些经常使用的代码封装乘代码片段，通过命令来快速创建。下面是定义代码片段的具体步骤。</p><ol><li>首先，执行<code>Ctrl+Shift+P</code> 打开命令面板，输入<code>Snippets</code>，并选择创建代码片段。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FuGFe-i5kAdbV5ptIYI8eHYCaIqT.png" alt><br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FpYWAEf2pqBvSan_Y_oJgcXjgj3F.png" alt></p><ol start="2"><li>然后输入代码片段并保存。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"vue template"</span>: &#123;</span><br><span class="line"><span class="attr">"prefix"</span>: <span class="string">"vuem"</span>,</span><br><span class="line"><span class="attr">"body"</span>: [</span><br><span class="line"><span class="string">"&lt;template&gt;"</span>,</span><br><span class="line"><span class="string">" &lt;div&gt;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">" &lt;/div&gt;"</span>,</span><br><span class="line"><span class="string">"&lt;/template&gt;"</span>,</span><br><span class="line"><span class="string">"&lt;script&gt;"</span>,</span><br><span class="line"><span class="string">" export default &#123;"</span>,</span><br><span class="line"><span class="string">"   name:'$1',"</span>,</span><br><span class="line"><span class="string">"   data () &#123;"</span>,</span><br><span class="line"><span class="string">"     return &#123;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"     &#125;"</span>,</span><br><span class="line"><span class="string">"   &#125;,"</span>,</span><br><span class="line"><span class="string">"   computed:&#123;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"   &#125;,"</span>,</span><br><span class="line"><span class="string">"   methods:&#123;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"   &#125;,"</span>,</span><br><span class="line"><span class="string">"   components: &#123;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"   &#125;,"</span>,</span><br><span class="line"><span class="string">" &#125;"</span>,</span><br><span class="line"><span class="string">"&lt;/script&gt;"</span>,</span><br><span class="line"><span class="string">"&lt;style scoped&gt;"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"&lt;/style&gt;"</span>,</span><br><span class="line"><span class="string">""</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"description"</span>: <span class="string">"vue template"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">```&lt;/div&gt;warning</span><br><span class="line">【**字段含义**】</span><br><span class="line"></span><br><span class="line">- vue template ：当前snippet名字。</span><br><span class="line">- prefix ：前缀，代码块使用快捷方式；键入前缀，按tab键，代码块就会被使用。</span><br><span class="line">- body ：代码块内容；换行使用\r\n。</span><br><span class="line">- description ：键入前缀，vscode 感知到前缀，显示的说明内容。</span><br><span class="line">- $1,$2,$0 ：指定代码模块生成后，编辑光标出现位置; 使用Tab键进行切换(编辑光标按$1,$2,$3...$0的顺序跳转)，$0是光标最后可切换位置。&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">3. 最后，新建.vue文件，输入 `vuem+tab` 或 `vuem+enter` 即生成模板。</span><br><span class="line"></span><br><span class="line">[Snippet语法](https://juejin.cn/post/6844903912068104199)</span><br><span class="line"></span><br><span class="line">## Emmet</span><br><span class="line">Emmet 语法对于开发HTML代码是非常高效的，但它不能直接在VSCode中使用，需要安装具体的插件。`[Vue Language Features (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.volar)`插件就能很好的支持Emmet语法。</span><br><span class="line"></span><br><span class="line">1. 首先，我们要在VSCode中安装一下`[Vue Language Features (Volar)](https://marketplace.visualstudio.com/items?itemName=Vue.volar)`。</span><br><span class="line">2. 其次，我们需要认真学一下Emmet常用语法。</span><br><span class="line"></span><br><span class="line">[Emmet](https://www.yuque.com/songxingguo/devhints/emmet)</span><br><span class="line"></span><br><span class="line">## 多项目工作区</span><br><span class="line">在很多时候我们都会面临同时开发多个项目情况，比如前端开发既要开发小程序端又要开发Web端这两个项目。如果我们打开两个VSCode窗口进行开发，在不同窗口间切法，显然会降低我们开发的效率。于是我们就可以考虑VSCode的多项目工作区，将多个项目同时放到一个工作区里面进行开发，减少了来回切换的麻烦。下面是具体的做法。</span><br><span class="line"></span><br><span class="line">1. 可以通过拖拽或选择的方式将文件夹添加都工作区。</span><br><span class="line">2. 也可以将文件夹移出工作区。</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FlW36F0Wu9ys3wZk7v3UC5Gfs6pA.png)</span><br><span class="line"></span><br><span class="line">## 终端</span><br><span class="line">在开发的过程中，很多事情我们都需要通过终端进行处理，比如安装依赖，提交代码等。所以能快速唤起终端并且能对终端进行一些基本的调整就显得很有必要了。</span><br><span class="line"></span><br><span class="line">| **Windows快捷键** | **Mac快捷键** | **描述** |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| `Ctrl+Shift+C` | `Cmd+Shift+C` | 打开新的外部终端 |</span><br><span class="line">|</span><br><span class="line"> | `ctrl+`` | 显示集成终端 |</span><br><span class="line">|  | `ctrl+Shift+`` | 创建新的集成终端 |</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FtCAGIQE7OFvfxv3GjgAOlM1XkqI.png)</span><br><span class="line"></span><br><span class="line">## //调试与运行</span><br><span class="line"></span><br><span class="line">## //重构代码</span><br><span class="line"></span><br><span class="line"># 扩展阅读</span><br><span class="line"></span><br><span class="line">- [配置前端环境](https://medium.com/@thoamsy/%E4%BD%BF%E7%94%A8-vs-code-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BE%88%E7%88%BD%E7%9A%84%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83-2d393ba5cc45)</span><br><span class="line">- [快捷键配置](https://juejin.im/post/6844903826063884296)</span><br><span class="line">- [keyboard-shortcuts-macos.pdf](https://www.yuque.com/attachments/yuque/0/2023/pdf/394169/1688802091554-3f696b9a-257b-4b0f-a329-5aea195cda5a.pdf?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2023%2Fpdf%2F394169%2F1688802091554-3f696b9a-257b-4b0f-a329-5aea195cda5a.pdf%22%2C%22name%22%3A%22keyboard-shortcuts-macos.pdf%22%2C%22size%22%3A206761%2C%22ext%22%3A%22pdf%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22download%22%3Afalse%2C%22taskId%22%3A%22uf72ca31a-19b2-468d-8083-ed87052d835%22%2C%22taskType%22%3A%22transfer%22%2C%22type%22%3A%22application%2Fpdf%22%2C%22mode%22%3A%22title%22%2C%22id%22%3A%22O4kBW%22%2C%22card%22%3A%22file%22%7D)</span><br><span class="line">- [vsCode 配置](https://www.cnblogs.com/chenguangliang/p/12034297.html)</span><br><span class="line">- [vscode-哔哩哔哩_Bilibili](https://search.bilibili.com/all?vt=03553703&amp;keyword=vscode&amp;from_source=webtop_search&amp;spm_id_from=333.1007&amp;search_source=5)</span><br><span class="line">- [Vscode真香插件，前端效率神器！！_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1kb4y1y7zr/?spm_id_from=333.337.search-card.all.click&amp;vd_source=19a3d7390d7927695ad503a1d8bcb0ad)</span><br><span class="line">- [001.课程介绍_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1G24y177Um?p=1&amp;vd_source=19a3d7390d7927695ad503a1d8bcb0ad)</span><br><span class="line">- [Emmet-HTML/CSS代码自动补全语法](https://code.z01.com/Emmet/)</span><br><span class="line">- [Visual Studio Code 权威指南](https://book.douban.com/subject/35125617/)</span><br><span class="line">- [Visual Studio Code 权威指南-韩骏-微信读书](https://weread.qq.com/web/bookDetail/7bc32db071f02f257bc2a8a)</span><br><span class="line">- [Documentation for Visual Studio Code](https://code.visualstudio.com/docs)</span><br><span class="line">- [《Visual Studio Code 权威指南》](https://www.yuque.com/songxingguo/devhints/ngrliymei9ng7nm4?view=doc_embed)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">最后，重学前端，将思考固定下来。</span><br><span class="line"></span><br><span class="line">- 笔记和记忆力是提高开发效率的最好方法。</span><br><span class="line">- 如果没有对旧事物进行大量练习，你不太可能发现新事物。</span><br><span class="line">- 努力学习最感兴趣的东西。</span><br><span class="line">&gt;  ©️版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！[原文地址-语雀](https://www.yuque.com/songxingguo/devhints/gieh2cbsygtk7ars)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令速查🚀</title>
      <link href="/2023/06/17/Vue%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/06/17/Vue%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fg2BDn7uyE_NJeeZ1oP_r6bF8g5R.jpeg" alt></p><a id="more"></a><h1 id="静态-API"><a href="#静态-API" class="headerlink" title="静态 API"></a>静态 API</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>用法：<code>Vue.config.xxx</code></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#silent" target="_blank" rel="noopener"><strong>silent</strong></a></td><td>配置是否取消 Vue 所有的日志与警告。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#optionMergeStrategies" target="_blank" rel="noopener"><strong>optionMergeStrategies</strong></a></td><td><a href="https://v2.cn.vuejs.org/v2/guide/mixins.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E6%B7%B7%E5%85%A5%E7%AD%96%E7%95%A5" target="_blank" rel="noopener">自定义选项的混入策略</a>。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#devtools" target="_blank" rel="noopener"><strong>devtools</strong></a></td><td>配置是否允许 <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a> 检查代码。开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#errorHandler" target="_blank" rel="noopener"><strong>errorHandler</strong></a></td><td>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#warnHandler" target="_blank" rel="noopener"><strong>warnHandler</strong></a></td><td>Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，在生产环境下它会被忽略。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#ignoredElements" target="_blank" rel="noopener"><strong>ignoredElements</strong></a></td><td>须使 Vue 忽略在 Vue 之外的自定义元素** **(e.g. 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#keyCodes" target="_blank" rel="noopener"><strong>keyCodes</strong></a></td><td>给 v-on 自定义键位别名。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#performance" target="_blank" rel="noopener"><strong>performance</strong></a></td><td>设置为 true 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" target="_blank" rel="noopener">performance.mark</a> API 的浏览器上。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#productionTip" target="_blank" rel="noopener"><strong>productionTip</strong></a></td><td>设置为 false 以阻止 vue 在启动时生成生产提示。</td></tr></tbody></table><h2 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h2><p>用法：<code>Vue.xxx()</code></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-extend" target="_blank" rel="noopener"><strong>Vue.extend()</strong></a></td><td>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-nextTick" target="_blank" rel="noopener"><strong>Vue.nextTick()</strong></a></td><td>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97" target="_blank" rel="noopener">异步更新队列</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener"><strong>Vue.set()</strong></a></td><td>向响应式对象中添加一个 property，并确保这个新 property 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 property，因为 Vue 无法探测普通的新增 property (比如 this.myObject.newProperty = ‘hi’)注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-delete" target="_blank" rel="noopener"><strong>Vue.delete()</strong></a></td><td>删除对象的 property。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到 property 被删除的限制。</td></tr><tr><td>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-directive" target="_blank" rel="noopener"><strong>Vue.directive()</strong></a></td><td>注册或获取全局指令。<a href="https://v2.cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">自定义指令</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-filter" target="_blank" rel="noopener"><strong>Vue.filter()</strong></a></td><td>注册或获取全局过滤器。<a href="https://v2.cn.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">过滤器</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-component" target="_blank" rel="noopener"><strong>Vue.component()</strong></a></td><td>注册或获取全局组件。注册还会自动使用给定的 id 设置组件的名称。<a href="https://v2.cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">组件</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-use" target="_blank" rel="noopener"><strong>Vue.use()</strong></a></td><td>安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。该方法需要在调用 new Vue() 之前被调用。当 install 方法被同一个插件多次调用，插件将只会被安装一次。<a href="https://v2.cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">插件</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-mixin" target="_blank" rel="noopener"><strong>Vue.mixin()</strong></a></td><td>全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用。<a href="https://v2.cn.vuejs.org/v2/guide/mixins.html#%E5%85%A8%E5%B1%80%E6%B7%B7%E5%85%A5" target="_blank" rel="noopener">全局混入</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-compile" target="_blank" rel="noopener"><strong>Vue.compile()</strong></a></td><td>将一个模板字符串编译成 render 函数。只在完整版时可用。<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">渲染函数</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-observable" target="_blank" rel="noopener"><strong>Vue.observable()</strong></a></td><td>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。</td></tr><tr><td>返回的对象可以直接用于<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">渲染函数</a>和<a href="https://v2.cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="noopener">计算属性</a>内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器。<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">深入响应式原理</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#Vue-version" target="_blank" rel="noopener"><strong>Vue.version()</strong></a></td><td>提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略。</td></tr></tbody></table><h1 id="实例-API"><a href="#实例-API" class="headerlink" title="实例 API"></a>实例 API</h1><h2 id="Vue-选项"><a href="#Vue-选项" class="headerlink" title="Vue 选项"></a>Vue 选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123; xxx: xxx &#125;)</span><br></pre></td></tr></table></figure><h3 id="选项-数据"><a href="#选项-数据" class="headerlink" title="选项-数据"></a>选项-数据</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#data" target="_blank" rel="noopener"><strong>data</strong></a></td><td>Vue 实例的数据对象。Vue 会递归地把 data 的 property 转换为 getter/setter，从而让 data 的 property 能够响应数据变化。</td></tr></tbody></table><ul><li>在创建实例之前，就声明所有的根级响应式 property。</li><li>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。Vue 实例也代理了 data 对象上所有的 property，因此访问 vm.a 等价于访问 vm.$data.a。</li><li>以 _ 或 $ 开头的 property 不会被 Vue 实例代理，因为它们可能和 Vue 内置的 property、API 方法冲突。你可以使用例如 vm.$data._property 的方式访问这些 property。</li><li>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</li><li>如果需要，可以通过将 vm.$data 传入 JSON.parse(JSON.stringify(…)) 得到深拷贝的原始数据对象。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#props" target="_blank" rel="noopener"><strong>props</strong></a> | props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</li><li>type：可以是下列原生构造函数中的一种：String、Number、Boolean、Array、Object、Date、Function、Symbol、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。Prop 类型的<a href="https://v2.cn.vuejs.org/v2/guide/components-props.html#Prop-%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">更多信息在此</a>。</li><li>default：any<br>为该 prop 指定一个默认值。如果该 prop 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回。</li><li>required：Boolean<br>定义该 prop 是否是必填项。在非生产环境中，如果这个值为 truthy 且该 prop 没有被传入的，则一个控制台警告将会被抛出。</li><li>validator：Function<br>自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 falsy 的值 (也就是验证失败)，一个控制台警告将会被抛出。你可以在<a href="https://v2.cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81" target="_blank" rel="noopener">这里</a>查阅更多 prop 验证的相关信息。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#propsData" target="_blank" rel="noopener"><strong>propsData</strong></a> | 只用于 <code>new</code> 创建的实例中。创建实例时传递 props。<strong>主要作用是方便测试。</strong> |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#computed" target="_blank" rel="noopener"><strong>computed</strong></a> | 计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。注意如果你为一个计算属性使用了箭头函数，则 <code>this</code> 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问。<a href="https://v2.cn.vuejs.org/v2/guide/computed.html" target="_blank" rel="noopener">计算属性</a></li><li>计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算。注意，如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#methods" target="_blank" rel="noopener"><strong>methods</strong></a> | methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 <code>this</code> 自动绑定为 Vue 实例。<br>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。<a href="https://v2.cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">事件处理器</a> |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener"><strong>watch</strong></a> | 一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个 property。<br>注意，不应该使用箭头函数来定义 watcher 函数，原因同上。 |</li></ul><h3 id="选项-DOM"><a href="#选项-DOM" class="headerlink" title="选项-DOM"></a>选项-DOM</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#el" target="_blank" rel="noopener"><strong>el</strong></a></td><td>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</td></tr></tbody></table><p>在实例挂载之后，元素可以用 vm.$el 访问。<br>如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 <code>vm.$mount()</code> 手动开启编译。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#template" target="_blank" rel="noopener"><strong>template</strong></a> | 一个字符串模板作为 Vue 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。<br>如果值以 # 开始，则它将被用作选择符，并使用匹配元素的 innerHTML 作为模板。常用的技巧是用 <script type="x-template"> 包含模板。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#render"><strong>render()</strong></a> | 字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。<br>如果组件是一个函数组件，渲染函数还会接收一个额外的 context 参数，为没有实例的函数组件提供上下文信息。<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html">渲染函数</a> |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#renderError"><strong>renderError()</strong></a> | 只在开发者环境下工作。当 render 函数遭遇错误时，提供另外一种渲染输出。其错误将会作为第二个参数传递到 renderError。这个功能配合 hot-reload 非常实用。 |</p><h3 id="选项-生命周期"><a href="#选项-生命周期" class="headerlink" title="选项-生命周期"></a>选项-生命周期</h3><blockquote><p>所有生命周期钩子的 this 上下文将自动绑定至实例中，因此你可以访问 data、computed 和 methods。这意味着你<strong>不应该使用箭头函数来定义一个生命周期方法 </strong>(例如 created: () =&gt; this.fetchTodos())。因为箭头函数绑定了父级上下文，所以 this 不会指向预期的组件实例，并且 this.fetchTodos 将会是 undefined。</p></blockquote><p>生命周期<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fhstsdj9wpF7QyqEQiTl7aJPUahU.png" alt=""></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#beforeCreate"><strong>beforeCreate</strong></a></td><td>在实例初始化之后,进行数据侦听和事件/侦听器的配置之前同步调用。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#created"><strong>created</strong></a></td><td>在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#beforeMount"><strong>beforeMount</strong></a></td><td>在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#mounted"><strong>mounted</strong></a></td><td>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</td></tr><tr><td>注意 mounted 不会保证所有的子组件也都被挂载完成。如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 mounted 内部使用 <a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick">vm.$nextTick</a>。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#beforeUpdate"><strong>beforeUpdate</strong></a></td><td>在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#updated"><strong>updated</strong></a></td><td>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</td></tr></tbody></table><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<a href="https://v2.cn.vuejs.org/v2/api/#computed">计算属性</a>或 <a href="https://v2.cn.vuejs.org/v2/api/#watch">watcher</a> 取而代之。<br>注意，updated 不会保证所有的子组件也都被重新渲染完毕。如果你希望等到整个视图都渲染完毕，可以在 updated 里使用 <a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick">vm.$nextTick</a>。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#activated"><strong>activated</strong></a> | 被 keep-alive 缓存的组件激活时调用。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#deactivated"><strong>deactivated</strong></a> | 被 keep-alive 缓存的组件失活时调用。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#beforeDestroy"><strong>beforeDestroy</strong></a> | 实例销毁之前调用。在这一步，实例仍然完全可用。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#destroyed"><strong>destroyed</strong></a> | 实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#errorCaptured"><strong>errorCaptured</strong></a> | 在捕获一个来自后代组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。<br>错误传播规则</p><ul><li>默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报。</li><li>如果一个组件的 inheritance chain (继承链)或 parent chain (父链)中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。</li><li>如果此 errorCaptured 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 config.errorHandler。</li><li>一个 errorCaptured 钩子能够返回 false 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler。<br>|</li></ul><h3 id="选项-资源"><a href="#选项-资源" class="headerlink" title="选项-资源"></a>选项-资源</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#directives"><strong>directives</strong></a></td><td>包含 Vue 实例可用指令的哈希表。<a href="https://v2.cn.vuejs.org/v2/guide/custom-directive.html">自定义指令</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#filters"><strong>filters</strong></a></td><td>包含 Vue 实例可用过滤器的哈希表。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#components"><strong>components</strong></a></td><td>包含 Vue 实例可用组件的哈希表。</td></tr></tbody></table><h3 id="选项-组合"><a href="#选项-组合" class="headerlink" title="选项-组合"></a>选项-组合</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#parent"><strong>parent</strong></a></td><td>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code>访问父实例，子实例被推入父实例的 <code>$children</code>数组中。</td></tr><tr><td>节制地使用 $parent 和 $children - 它们的主要目的是作为访问组件的应急方法。更推荐用 props 和 events 实现父子组件通信。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#mixins"><strong>mixins</strong></a></td><td><code>mixins</code> 选项接收一个混入对象的数组。这些混入对象可以像正常的实例对象一样包含实例选项，这些选项将会被合并到最终的选项中，使用的是和 Vue.extend() 一样的选项合并逻辑。也就是说，如果你的混入包含一个 created 钩子，而创建组件本身也有一个，那么两个函数都会被调用。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#extends"><strong>extends</strong></a></td><td>允许声明扩展另一个组件 (可以是一个简单的选项对象或构造函数)，而无需使用 Vue.extend。这主要是为了便于扩展单文件组件。这和 <code>mixins</code> 类似。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#provide-inject"><strong>provide / inject</strong></a></td><td>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</td></tr></tbody></table><h3 id="选项-其他"><a href="#选项-其他" class="headerlink" title="选项-其他"></a>选项-其他</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#name"><strong>name</strong></a></td><td>只有作为组件选项时起作用。允许组件模板递归地调用自身。注意，组件在全局用 Vue.component() 注册时，全局 ID 自动作为组件的 name。指定 name 选项的另一个好处是便于调试。有名字的组件有更友好的警告信息。另外，当在有 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a>，未命名组件将显示成 <AnonymousComponent>，这很没有语义。通过提供 name 选项，可以获得更有语义信息的组件树。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#delimiters"><strong>delimiters</strong></a></td><td>这个选项只在完整构建版本中的浏览器内编译时可用。改变纯文本插入分隔符。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#functional"><strong>functional</strong></a></td><td>使组件无状态 (没有 data) 和无实例 (没有 this 上下文)。他们用一个简单的 render 函数返回虚拟节点使它们渲染的代价更小。<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">函数式组件</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#model"><strong>model</strong></a></td><td>允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#inheritAttrs"><strong>inheritAttrs</strong></a></td><td>默认情况下父作用域的不被认作 props 的 attribute 绑定 (attribute bindings) 将会“回退”且作为普通的 HTML attribute 应用在子组件的根元素上。当撰写包裹一个目标元素或另一个组件的组件时，这可能不会总是符合预期行为。通过设置 inheritAttrs 到 false，这些默认行为将会被去掉。而通过 (同样是 2.4 新增的) 实例 property $attrs 可以让这些 attribute 生效，且可以通过 v-bind 显性的绑定到非根元素上。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#comments"><strong>comments</strong></a></td><td>这个选项只在完整构建版本中的浏览器内编译时可用。当设为 true 时，将会保留且渲染模板中的 HTML 注释。默认行为是舍弃它们。</td></tr></tbody></table><h2 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123; created: function () &#123; console.log(this.xx) &#125; &#125;)</span><br></pre></td></tr></table></figure><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-data"><strong>vm.$data</strong></a></td><td>Vue 实例观察的数据对象。Vue 实例代理了对其 data 对象 property 的访问。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-props"><strong>vm.$props</strong></a></td><td>当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象 property 的访问。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-el"><strong>vm.$el</strong></a></td><td>Vue 实例使用的根 DOM 元素。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-options"><strong>vm.$options</strong></a></td><td>用于当前 Vue 实例的初始化选项。需要在选项中包含自定义 property 时会有用处。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-parent"><strong>vm.$parent</strong></a></td><td>父实例，如果当前实例有的话。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-root"><strong>vm.$root</strong></a></td><td>当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-children"><strong>vm.$children</strong></a></td><td>当前实例的直接子组件。需要注意 $children 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 $children 来进行数据绑定，考虑使用一个数组配合 v-for 来生成子组件，并且使用 Array 作为真正的来源。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-slots"><strong>vm.$slots</strong></a></td><td>用来访问被<a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E6%8F%92%E6%A7%BD%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9">插槽分发</a>的内容。每个<a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">具名插槽</a>有其相应的 property (例如：v-slot:foo 中的内容将会在 vm.$slots.foo 中被找到)。default property 包括了所有没有被包含在具名插槽中的节点，或 v-slot:default 的内容。</td></tr></tbody></table><p>请注意插槽不是响应性的。如果你需要一个组件可以在被传入的数据发生变化时重渲染，我们建议改变策略，依赖诸如 props 或 data 等响应性实例选项。<br>注意：v-slot:foo 在 2.6 以上的版本才支持。对于之前的版本，你可以使用<a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">废弃了的语法</a>。<br>在使用<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>书写一个组件时，访问 vm.$slots 最有帮助。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-scopedSlots">*<em>vm.$scopedSlots\</em>*</a> | 用来访问<a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">作用域插槽</a>。对于包括 默认 slot 在内的每一个插槽，该对象都包含一个返回相应 VNode 的函数。<br>vm.$scopedSlots 在使用<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>开发一个组件时特别有用。<br>注意：从 2.6.0 开始，这个 property 有两个变化：</p><ol><li>作用域插槽函数现在保证返回一个 VNode 数组，除非在返回值无效的情况下返回 undefined。</li><li>所有的 $slots 现在都会作为函数暴露在 $scopedSlots 中。如果你在使用渲染函数，不论当前插槽是否带有作用域，我们都推荐始终通过 $scopedSlots 访问它们。这不仅仅使得在未来添加作用域变得简单，也可以让你最终轻松迁移到所有插槽都是函数的 Vue 3。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-refs"><strong>vm.$refs</strong></a> | 一个对象，持有注册过 <a href="https://v2.cn.vuejs.org/v2/api/#ref">refattribute</a> 的所有 DOM 元素和组件实例。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-isServer"><strong>vm.$isServer</strong></a> | 当前 Vue 实例是否运行于服务器。<a href="https://v2.cn.vuejs.org/v2/guide/ssr.html">服务端渲染</a> |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-attrs"><strong>vm.$attrs</strong></a> | 包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-listeners"><strong>vm.$listeners</strong></a> | 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。 |</li></ol><h3 id="实例方法-数据"><a href="#实例方法-数据" class="headerlink" title="实例方法-数据"></a>实例方法-数据</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-watch"><strong>vm.$watch</strong></a></td><td>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受简单的键路径。对于更复杂的表达式，用一个函数取代。注意：在变更 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象/数组。Vue 不会保留变更之前值的副本。</td></tr></tbody></table><ul><li>选项：deep，为了发现对象内部值的变化，可以在选项参数中指定 deep: true。注意监听数组的变更不需要这么做。</li><li>选项：immediate，在选项参数中指定 immediate: true 将立即以表达式的当前值触发回调。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-set"><strong>vm.$set</strong></a> | 这是全局 <code>[Vue.set](https://v2.cn.vuejs.org/v2/api/#Vue-set)</code> 的别名。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-delete"><strong>vm.$delete</strong></a> | 这是全局 <code>Vue.delete</code> 的别名。 |</li></ul><h3 id="实例方法-事件"><a href="#实例方法-事件" class="headerlink" title="实例方法-事件"></a>实例方法-事件</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-on"><strong>vm.$on</strong></a></td><td>监听当前实例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所有传入事件触发函数的额外参数。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-once"><strong>vm.$once</strong></a></td><td>监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-off"><strong>vm.$off</strong></a></td><td>移除自定义事件监听器。</td></tr></tbody></table><ul><li>如果没有提供参数，则移除所有的事件监听器；</li><li>如果只提供了事件，则移除该事件所有的监听器；</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#vm-emit"><strong>vm.$emit</strong></a> | 触发当前实例上的事件。附加参数都会传给监听器回调。 |</li></ul><h3 id="实例方法-生命周期"><a href="#实例方法-生命周期" class="headerlink" title="实例方法-生命周期"></a>实例方法-生命周期</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-mount"><strong>vm.$mount</strong></a></td><td>如果 Vue 实例在实例化时没有收到 el 选项，则它处于“未挂载”状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例。如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 DOM API 把它插入文档中。这个方法返回实例自身，因而可以链式调用其它实例方法。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-forceUpdate"><strong>vm.$forceUpdate</strong></a></td><td>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-nextTick"><strong>vm.$nextTick</strong></a></td><td>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#vm-destroy"><strong>vm.$destroy</strong></a></td><td>完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。</td></tr><tr><td>触发 beforeDestroy 和 destroyed 的钩子。</td></tr></tbody></table><h1 id="内置内容"><a href="#内置内容" class="headerlink" title="内置内容"></a>内置内容</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>用法：<code>&lt;span v-xx=&quot;xx&quot;&gt;&lt;/span&gt;</code></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-text"><strong>v-text</strong></a></td><td>更新元素的 <code>textContent</code>。如果要更新部分的 textContent，需要使用  插值。<a href="https://v2.cn.vuejs.org/v2/guide/syntax.html#%E6%8F%92%E5%80%BC">数据绑定语法 - 插值</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-html"><strong>v-html</strong></a></td><td>更新元素的 innerHTML。注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-show"><strong>v-show</strong></a></td><td>根据表达式之真假值，切换元素的 display CSS property。当条件变化时该指令触发过渡效果。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-if"><strong>v-if</strong></a></td><td>根据表达式的值的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a> 来有条件地渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <template>，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-else"><strong>v-else</strong></a></td><td>为 v-if 或者 v-else-if 添加“else 块”。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-else-if"><strong>v-else-if</strong></a></td><td>表示 v-if 的“else if 块”。可以链式调用。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-for"><strong>v-for</strong></a></td><td>基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 alias in expression，为当前遍历的元素提供别名。v-for 的默认行为会尝试原地修改元素而不是移动它们。要强制其重新排序元素，你需要用特殊 attribute key 来提供一个排序提示。从 2.6 起，v-for 也可以在实现了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE">可迭代协议</a>的值上使用，包括原生的 Map 和 Set。不过应该注意的是 Vue 2.x 目前并不支持可响应的 Map 和 Set 值，所以无法自动探测变更。</td></tr><tr><td>当和 v-if 一起使用时，v-for 的优先级比 v-if 更高。详见<a href="https://v2.cn.vuejs.org/v2/guide/list.html#v-for-with-v-if">列表渲染教程</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#v-on"><strong>v-on</strong></a></td><td>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</td></tr></tbody></table><p>用在普通元素上时，只能监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">原生 DOM 事件</a>。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。<br>在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event property：v-on:click=”handle(‘ok’, $event)”。<br>从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。</p><ul><li>修饰符：<ul><li>.stop - 调用 event.stopPropagation()。</li><li>.prevent - 调用 event.preventDefault()。</li><li>.capture - 添加事件侦听器时使用 capture 模式。</li><li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。</li><li>.native - 监听组件根元素的原生事件。</li><li>.once - 只触发一次回调。</li><li>.left - (2.2.0) 只当点击鼠标左键时触发。</li><li>.right - (2.2.0) 只当点击鼠标右键时触发。</li><li>.middle - (2.2.0) 只当点击鼠标中键时触发。</li><li>.passive - (2.3.0) 以 { passive: true } 模式添加侦听器<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-bind"><strong>v-bind</strong></a> | 动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。<br>在绑定 class 或 style attribute 时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。<br>在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。<br>没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。</li></ul></li><li>修饰符：<ul><li>.prop - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(<a href="https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html#answer-6004028">差别在哪里？</a>)</li><li>.camel - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持)，驼峰命名。</li><li>.sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-model"><strong>v-model</strong></a> | 在表单控件或者组件上创建双向绑定。</li></ul></li><li>修饰符：<ul><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#lazy">.lazy</a> - 取代 input 监听 change 事件</li><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#number">.number</a> - 输入字符串转为有效的数字</li><li><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#trim">.trim</a> - 输入首尾空格过滤<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-slot"><strong>v-slot</strong></a> | 提供具名插槽或需要接收 prop 的插槽。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-pre"><strong>v-pre</strong></a> | 跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-cloak"><strong>v-cloak</strong></a> | 这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#v-once"><strong>v-once</strong></a> | 只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。 |</li></ul></li></ul><h2 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h2><p>用法：<code>&lt;p xxx=&quot;xxx&quot;&gt;hello&lt;/p&gt;</code></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#key"><strong>key</strong></a></td><td>key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</td></tr></tbody></table><p>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。<br>它也可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p><ul><li>完整地触发组件的生命周期钩子</li><li>触发过渡</li></ul><p>当 text 发生改变时，<span> 总是会被替换而不是被修改，因此会触发过渡。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#ref"><strong>ref</strong></a> | ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。</p><ul><li>当 v-for 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。</li><li>关于 ref 注册时间的重要说明：因为 ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#is"><strong>is</strong></a> | 用于<a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">动态组件</a>且基于 <a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E8%A7%A3%E6%9E%90-DOM-%E6%A8%A1%E6%9D%BF%E6%97%B6%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">DOM 内模板的限制</a>来工作。 |</li></ul><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><p>用法：<code>&lt;xxx&gt;&lt;/xxx&gt;</code></p><table><thead><tr><th><strong>选项</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#component"><strong>component</strong></a></td><td>渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染。<a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6">动态组件</a></td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#transition"><strong>transition</strong></a></td><td><transition> 元素作为单个元素/组件的过渡效果。<transition> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中。</td></tr><tr><td><a href="https://v2.cn.vuejs.org/v2/api/#transition-group"><strong>transition-group</strong></a></td><td><transition-group> 元素作为多个元素/组件的过渡效果。<transition-group> 渲染一个真实的 DOM 元素。默认渲染 <span>，可以通过 tag attribute 配置哪个元素应该被渲染。</td></tr></tbody></table><p>注意，每个 <transition-group> 的子节点必须有独立的 key，动画才能正常工作</p><p><transition-group> 支持通过 CSS transform 过渡移动。当一个子节点被更新，从屏幕上的位置发生变化，它会被应用一个移动中的 CSS 类 (通过 name attribute 或配置 move-class attribute 自动生成)。如果 CSS transform property 是“可过渡”property，当应用移动类时，将会使用 <a href="https://aerotwist.com/blog/flip-your-animations/">FLIP 技术</a>使元素流畅地到达动画终点。 |<br>| <a href="https://v2.cn.vuejs.org/v2/api/#keep-alive"><strong>keep-alive</strong></a> | <keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <transition> 相似，<keep-alive> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。<br>当组件在 <keep-alive> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。主要用于保留组件状态或避免重新渲染。<br>注意，<keep-alive> 是用在其一个直属的子组件被开关的情形。如果你在其中有 v-for 则不会工作。如果有上述的多个条件性的子元素，<keep-alive> 要求同时只有一个子元素被渲染。</p><ul><li>Props：<ul><li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li><li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li><li>max - 数字。最多可以缓存多少组件实例。<br>|<br>| <a href="https://v2.cn.vuejs.org/v2/api/#slot"><strong>slot</strong></a> | <slot> 元素作为组件模板之中的内容分发插槽。<slot> 元素自身将被替换。<br>详细用法，请参考下面教程的链接。<a href="https://v2.cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87%E6%8F%92%E6%A7%BD%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9">通过插槽分发内容</a> |</li></ul></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.yuque.com/kanding/ktech/otll9x?view=doc_embed">Vuex 极速入门</a><br><a href="https://www.yuque.com/kanding/ktech/kx70h0?view=doc_embed">Vue2 快速上门(1)-基础知识</a><br><a href="https://www.yuque.com/kanding/ktech/lrqg93?view=doc_embed">Vue2 快速上门(2)-模板语法</a><br><a href="https://www.yuque.com/kanding/ktech/cky107?view=doc_embed">Vue2 快速上门(3)-组件与复用</a><br><a href="https://v2.cn.vuejs.org/v2/api/">API — Vue.js</a><br><a href="https://cn.vuejs.org/api/">API 参考 | Vue.js</a><br><a href="https://cn.vuejs.org/guide/introduction.html">简介 | Vue.js</a><br><a href="https://v2.cn.vuejs.org/v2/guide/">介绍 — Vue.js</a></p><hr><p>最后，重学前端，将思考固定下来。</p><ul><li>笔记和记忆力是提高开发效率的最好方法。</li><li>如果没有对旧事物进行大量练习，你不太可能发现新事物。</li><li>努力学习最感兴趣的东西。<blockquote><p>©️ 版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/songxingguo/devhints/nholynuhnqrhg0tg">原文地址-语雀</a></p></blockquote></li></ul></script></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令速查🚀</title>
      <link href="/2023/05/27/Linux%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/05/27/Linux%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi3TCMSeF32kRYmI8qEfGc16lXNU.jpeg" alt></h1><a id="more"></a><h1 id="指令速查"><a href="#指令速查" class="headerlink" title="指令速查"></a>指令速查</h1><h2 id="指令-帮助"><a href="#指令-帮助" class="headerlink" title="指令-帮助"></a>指令-帮助</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>help</code></td><td></td></tr><tr><td><code>man</code></td><td>查看帮助命令</td></tr><tr><td><code>man ls</code></td><td>查看 ls 命令的帮助文档</td></tr></tbody></table><h2 id="指令-目录"><a href="#指令-目录" class="headerlink" title="指令-目录"></a>指令-目录</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><code>ls</code></td><td>列出目录及文件名，英文全拼：list files</td></tr></tbody></table><ul><li>ls -d ：只列出目录本身</li><li>ls -a 列出目录所有文件，包含以.开始的隐藏文件</li><li>ls -A 列出除.及..的其它文件</li><li>ls -r 反序排列</li><li>ls -t 以文件修改时间排序</li><li>ls -S 以文件大小排序</li><li>ls -h 以易读大小显示</li><li>ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<br>|<br>| <code>ls | sed &quot;s:^:</code>pwd<code>/:&quot;</code> | 列出文件绝对路径（不包含隐藏文件） | |<br>| <code>ls -l t*</code> | 列出当前目录中所有以”t”开头的目录的详细内容 | |<br>| <code>ls -lrS</code> | 按大小反序显示文件详细信息 | |<br>| <code>ls -lhrt</code> | 按易读方式按时间反序排序，并显示文件详细信息 | |<br>| <code>cd</code> [相对路径或绝对路径] | 切换目录，英文全拼：change directory |</li><li><strong>绝对路径</strong>：<br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</li><li><strong>相对路径</strong>：<br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法。</li><li><strong>~</strong> 也表示为 home 目录 的意思， <strong>.</strong> 则是表示目前所在的目录， <strong>..</strong> 则表示目前目录位置的上一层目录。<br>|<br>| <code>cd /</code> | 进入要目录 | |<br>| <code>cd ~</code> | 进入 “home” 目录 | |<br>| <code>cd -</code> | 进入上一次工作路径 | |<br>| <code>cd !$</code> | 把上个命令的参数作为 cd 参数使用 | |<br>| <code>pwd</code> | 显示目前的目录，英文全拼：print work directory |</li><li>-P ：显示出确实的路径，而非使用链接 (link) 路径。<br>|<br>| <code>pwd -P</code> | 查看软链接的实际路径 | |<br>| <code>mkdir</code> [-mp] 目录名称 | 创建一个新的目录，英文全拼：make directory |</li><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！<br>|<br>| <code>mkdir t</code> | 当前工作目录下创建名为 t 的文件夹 | |<br>| <code>mkdir -p /tmp/test/t1/t</code> | 在 tmp 目录下创建路径为 test/t1/t 的目录 | |<br>| <code>rmdir</code> [-p] 目录名称 | 删除一个空的目录，英文全拼：remove directory |</li><li>-p ：从该目录起，一次删除多级空目录<br>|<br>| <code>rmdir -p parent/child/child11</code> | 当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除 | |<br>| <code>cp</code> | 复制文件或目录，英文全拼：copy file |</li><li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>-d：若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身；</li><li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>-l：进行硬式链接(hard link)的链接档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>-r：递归持续复制，用於目录的复制行为；(常用)</li><li>-s：复制成为符号链接档 (symbolic link)，亦即『捷径』文件；</li><li>-u：若 destination 比 source 旧才升级 destination ！<br>|<br>| <code>cp -ai a.txt test</code> | 复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。 | |<br>| <code>cp -s a.txt link_a.txt</code> | 为 a.txt 建立一个链接（快捷方式） | |<br>| <code>rm [选项] 文件…</code> | 删除文件或目录，英文全拼：remove |</li><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！<br>|<br>| <code>rm -i *.log</code> | 删除任何 .log 文件，删除前逐一询问确认 | |<br>| <code>rm -rf test</code> | 删除 test 子目录及子目录中所有档案删除，并且不用一一确认 | |<br>| <code>rm -- -f*</code> | 删除以 -f 开头的文件 | |<br>| <code>mv</code> | 移动文件与目录，或修改文件与目录的名称，英文全拼：move file |</li><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)<br>|<br>| <code>mv test.log test1.txt</code> | 将文件 test.log 重命名为 test1.txt | |<br>| <code>mv llog1.txt log2.txt log3.txt /test3</code> | 将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 | |<br>| <code>mv -i log1.txt log2.txt</code> | 将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 | |<br>| <code>mv * ../</code> | 移动当前文件夹下的所有文件到上一级目录 | |</li></ul><h2 id="指令-文件"><a href="#指令-文件" class="headerlink" title="指令-文件"></a>指令-文件</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><strong>文件创建&amp;修改</strong></td><td></td><td></td></tr><tr><td><code>touch</code> [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][–help][–version][文件或目录…]</td></tr></tbody></table><ul><li>用于修改文件或者目录的时间属性，包括存取时间和更改时间。</li><li>若文件不存在，系统会建立一个新的文件。<br>|</li><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。<br>|<br>| <strong>文件编辑</strong> | | |<br>| <code>vim</code> [filename] | 启动 vi/vim，进行编辑。具体查看：<a href="#Ow1Ed">Vim 编辑器</a>。 | |<br>| <strong>文件查看</strong> | | |<br>| <code>cat</code> [-AbEnTv] | 由第一行开始显示文件内容 |</li><li>-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符<br>|<br>| <code>cat file1 file2 &gt; file</code> | 将几个文件合并为一个文件 | |<br>| <code>cat &gt; filename</code> | 从键盘创建一个文件，只能创建新文件，不能编辑已有文。 | |<br>| <code>cat filename</code> | 一次显示整个文件 | |<br>| <code>tac</code> | 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！ | |<br>| <code>nl</code> [-bnw] 文件 | 显示的时候，顺道输出行号！ |</li><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。<br>|<br>| <code>more</code> | 一页一页的显示文件内容 |</li><li>空白键 (space)：代表向下翻一页；</li><li>Enter：代表向下翻『一行』；</li><li>/字串：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f ：立刻显示出档名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。<br>|<br>| <code>more +3 text.txt</code> | 显示文件中从第 3 行起的内容 | |<br>| <code>ls -l | more -5</code> | 在所列出文件目录详细信息，借助管道使每次显示 5 行，按空格显示下 5 行。 | |<br>| <code>less</code> | 与 more 类似，但是比 more 更好的是，他可以往前翻页！ |</li><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻『字串』的功能；</li><li>?字串 ：向上搜寻『字串』的功能；</li><li>n：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q：离开 less 这个程序；<br>|<br>| <code>ps -aux | less -N</code> | ps 查看进程信息并通过 less 分页显示 | |<br>| <code>less 1.log 2.log</code> | 查看多个文件 | |<br>| <code>head</code> [-n number] 文件 | 只看头几行，默认显示前面 10 行 |</li><li>-n ：后面接数字，代表显示几行的意思<br>|<br>| <code>head 1.log -n 20</code> | 显示 1.log 文件中前 20 行 | |<br>| <code>head -c 20 log2014.log</code> | 显示 1.log 文件前 20 字节 | |<br>| <code>head -n -10 t.log</code> | 显示 t.log 最后 10 行 | |<br>| <code>tail</code> [-n number] 文件 | 只看尾巴几行 |</li><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c 才会结束 tail 的侦测<br>|<br>| <code>ping 127.0.0.1 &gt; ping.log &amp;</code> | 循环读取逐渐增加的文件内容 | |<br>| <code>tail -f ping.log</code> | 后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。 | |<br>| <strong>文件对比</strong> | | |<br>| <code>diff</code> | 文件对比 | |<br>| <code>diff -w name_list.txt name_list_new.txt</code> | 比较的时候忽略空白符 | |</li></ul><h2 id="指令-查找"><a href="#指令-查找" class="headerlink" title="指令-查找"></a>指令-查找</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><code>find</code></td><td>在文件树中查找文件，并作出相应的处理</td></tr></tbody></table><ul><li>-name 按照文件名查找文件</li><li>-perm 按文件权限查找文件</li><li>-user 按文件属主查找文件</li><li>-group 按照文件所属的组来查找文件。</li><li>-type 查找某一类型的文件，诸如：<ul><li>b - 块设备文件</li><li>d - 目录</li><li>c - 字符设备文件</li><li>l - 符号链接文件</li><li>p - 管道文件</li><li>f - 普通文件</li></ul></li><li>-size n :[c] 查找文件长度为 n 块文件，带有 c 时表文件字节大小</li><li>-amin n 查找系统中最后 N 分钟访问的文件</li><li>-atime n 查找系统中最后 n*24 小时访问的文件</li><li>-cmin n 查找系统中最后 N 分钟被改变文件状态的文件</li><li>-ctime n 查找系统中最后 n*24 小时被改变文件状态的文件</li><li>-mmin n 查找系统中最后 N 分钟被改变文件数据的文件</li><li>-mtime n 查找系统中最后 n*24 小时被改变文件数据的文件</li><li>(用减号-来限定更改时间在距今 n 日以内的文件，而用加号+来限定更改时间在距今 n 日以前的文件。 )</li><li>-maxdepth n 最大查找目录深度</li><li>-prune 选项来指出需要忽略的目录。在使用-prune 选项时要当心，因为如果你同时使用了-depth 选项，那么-prune 选项就会被 find 命令忽略</li><li>-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer 选项<br>|<br>| <code>find -atime -2</code> | 查找 48 小时内修改过的文件 | |<br>| <code>find ./ -name &#39;*.log&#39;</code> | 在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录 | |<br>| <code>find -size +1000c</code> | 查找大于 1K 的文件 | |<br>| <code>find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; {} \\</code> | 当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件 | |<br>| <code>grep</code> | 文本搜索命令 |</li><li>-A n –after-context 显示匹配字符后 n 行</li><li>-B n –before-context 显示匹配字符前 n 行</li><li>-C n –context 显示匹配字符前后 n 行</li><li>-c –count 计算符合样式的列数</li><li>-i 忽略大小写</li><li>-l 只列出文件内容符合指定的样式的文件名称</li><li>-f 从文件中读取关键词</li><li>-n 显示匹配内容的所在文件中行数</li><li>-R 递归查找文件夹<br>|<br>| <code>ps -ef | grep svn</code> | 查找指定进程 | |<br>| <code>ps -ef | grep svn -c</code> | 查找指定进程个数 | |<br>| <code>cat test1.txt | grep -f key.log</code> | 从文件中读取关键词 | |<br>| <code>which</code> | 查看可执行文件的位置 | |<br>| <code>which cd</code> | 查看 cd，显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令。 | |<br>| <code>locate</code> | 配合数据库查看文件位置 |</li><li>-l num（要显示的行数）</li><li>-f 将特定的档案系统排除在外，如将 proc 排除在外</li><li>-r 使用正则运算式做为寻找条件<br>|</li></ul><h2 id="指令-系统管理"><a href="#指令-系统管理" class="headerlink" title="指令-系统管理"></a>指令-系统管理</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th><strong>选项</strong></th></tr></thead><tbody><tr><td><strong>磁盘信息</strong></td><td></td><td></td></tr><tr><td><code>df</code></td><td>显示磁盘空间使用情况</td></tr></tbody></table><ul><li>-a 全部文件系统列表</li><li>-h 以方便阅读的方式显示信息</li><li>-i 显示 inode 信息</li><li>-k 区块为 1024 字节</li><li>-l 只显示本地磁盘</li><li>-T 列出文件系统类型<br>|<br>| <code>df -l</code> | 显示磁盘使用情况 | |<br>| <code>df -haT</code> | 以易读方式列出所有文件系统及其类型 | |<br>| <code>du [选项] [文件]</code> | 对文件和目录磁盘使用的空间的查看 |</li><li>-a 显示目录中所有文件大小</li><li>-k 以 KB 为单位显示文件大小</li><li>-m 以 MB 为单位显示文件大小</li><li>-g 以 GB 为单位显示文件大小</li><li>-h 以易读方式显示文件大小</li><li>-s 仅显示总计</li><li>-c 或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和<br>|<br>| <code>du -h scf/</code> | 以易读方式显示文件夹内及子文件夹大小 | |<br>| <code>du -ah scf/</code> | 以易读方式显示文件夹内所有文件大小 | |<br>| 进程管理 | | |<br>| <code>ps</code> | 查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top |</li><li>-A 显示所有进程</li><li>a 显示所有进程</li><li>-a 显示同一终端下所有进程</li><li>c 显示进程真实名称</li><li>e 显示环境变量</li><li>f 显示进程间的关系</li><li>r 显示当前终端运行的进程</li><li>-aux 显示所有包含其它使用的进程<br>|<br>| <code>ps -ef</code> | 显示当前所有进程 | |<br>| <code>ps-ef | grep java</code> | 显示当前所有 java 相关进程 | |<br>| <code>top</code> | 正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等 |</li><li>-c 显示完整的进程命令</li><li>-s 保密模式</li><li>-p &lt;进程号&gt; 指定进程显示</li><li>-n &lt;次数&gt;循环显示次数<br>|<br>| <code>top -u oracle</code> | 显示某个特定用户的进程，可以使用-u 选项 | |<br>| <code>kill</code> | 杀死进程。 |</li><li>-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</li><li>-a 当处理当前进程时，不限制命令名和进程号的对应关系</li><li>-p 指定 kill 命令只打印相关进程的进程号，而不发送任何信号</li><li>-s 指定发送信号</li><li>-u 指定用户<br>|<br>| <code>kill -9 $(ps -ef | grep pro1)</code> | 先使用 ps 查找进程 pro1，然后用 kill 杀掉 | |<br>| <code>kill -s 9 27810</code> | 杀死进程号为 27810 的进程，强制终止，系统资源无法回收。 | |<br>| shutdown | 关机与重启 | |<br>| <code>shutdown -h now</code> | 立刻关机 | |<br>| <code>shutdown -r -t 60</code> | 60 秒后重启 | |<br>| <code>shutdown -r now</code> | 重启(1) | |<br>| <code>reboot</code> | 重启(2) | |</li></ul><h2 id="指令-网络通讯"><a href="#指令-网络通讯" class="headerlink" title="指令-网络通讯"></a>指令-<strong>网络通讯</strong></h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>ifconfig</code></td><td>显示网络设备情况</td></tr><tr><td><code>netstat</code></td><td>显示网络相关信</td></tr><tr><td>netstat -a</td><td>列出所有端口</td></tr><tr><td>netstat -tunlp</td><td>grep 端口号</td><td>查看进程端口号</td></tr><tr><td><code>ping</code></td><td></td></tr><tr><td><code>ping -b 192.168.120.1</code></td><td></td></tr><tr><td><code>ping -c 5 gmail.com</code></td><td>ping 一个远程主机，只发 5 个数据包</td></tr><tr><td><code>dig</code></td></tr></tbody></table><p>| <code>curl</code><br><a href="https://curl.se/docs/" target="_blank" rel="noopener">官方文档</a> | 用来请求 Web 服务器。 |<br>| <a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">Homebrew</a> | MacOS 软件包管理器 |<br>| <strong>软件下载与安装</strong> | |<br>| <code>/bin/bash -c &quot;$(curl -fsSL [https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;](https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;)</code> | 安装<code>Homebrew</code> |<br>| <code>brew install wget</code> | 安装<code>wget</code> |<br>| <code>wget</code><br><a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">官方文档</a> | wget 是一个使用 HTTP,HTTPS,FTP 和 FTPS 协议来下载文件的免费软件 |<br>| <code>wget http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code> | 使用 wget 从网上下载软件、音乐、视频 |<br>| <code>wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701</code> | 下载文件并以指定的文件名保存文件 |<br>| <code>wget -b http://www.baidu.com/index.html</code> | 使用 wget -b 后台下载 |<br>| <code>tail -f wget-log</code> | 查看下载进度 |<br>| <code>ftp</code> | 连接 ftp 服务器并下载多个文件 |<br>| <code>ftp IP/hostname</code> | |</p><h2 id="指令-备份压缩"><a href="#指令-备份压缩" class="headerlink" title="指令-备份压缩"></a>指令-备份压缩</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>tar</code></td><td>压缩或解压</td></tr><tr><td><code>tar cvf archive_name.tar dirname/</code></td><td>压缩文件</td></tr><tr><td><code>tar xvf archive_name.tar</code></td><td>解压文件</td></tr><tr><td><code>tar tvf archive_name.tar</code></td><td>查看 tar 文件</td></tr><tr><td><code>gzip</code></td><td>压缩或解压</td></tr><tr><td><code>gzip test.txt</code></td><td>创建一个*.gz 的压缩文件</td></tr><tr><td><code>gzip -d test.txt.gz</code></td><td>解压*.gz 文件</td></tr><tr><td><code>gzip -l *.gz</code></td><td>显示压缩的比率</td></tr></tbody></table><h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th><th></th></tr></thead><tbody><tr><td><strong>mysql</strong></td><td></td><td></td></tr><tr><td><strong>安装与连接</strong></td><td></td><td></td></tr><tr><td><code>wget [http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz](http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz)</code></td><td>下载 mysql</td><td></td></tr><tr><td><code>tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz</code></td><td>解压 mysql 压缩包</td><td></td></tr><tr><td><code>mysql -u root -p -h 192.168.1.2</code></td><td>连接一个远程数据库，需要输入密码</td><td></td></tr><tr><td><code>mysql -u root -p</code></td><td>连接本地数据库</td><td></td></tr><tr><td><code>lsof -i:3306</code></td><td>查看 Mysql 服务</td><td></td></tr><tr><td><code>service mysql status</code></td><td>查看数据库状态</td><td></td></tr><tr><td><strong>数据库操作</strong></td><td></td><td></td></tr><tr><td><code>show databases</code></td><td>查看数据库</td><td></td></tr><tr><td><code>use dbname</code></td><td>管理数据库</td><td></td></tr><tr><td><code>show tables</code></td><td>查看数据库表</td><td></td></tr><tr><td><code>desc tablename</code></td><td>查看表结构</td><td></td></tr><tr><td><code>drop table [if exists] tablename;</code></td><td>删除表</td><td></td></tr><tr><td><a href="https://wangdoc.com/ssh/" target="_blank" rel="noopener"><strong>ssh</strong></a></td><td><strong>登录远程服务器</strong></td><td></td></tr><tr><td><code>yum install ssh</code></td><td>安装 SSH</td><td></td></tr><tr><td><code>service sshd start</code></td><td>启动 SSH</td><td></td></tr><tr><td><code>service sshd restart</code></td><td>重启 SSH</td><td></td></tr><tr><td><code>ssh root@127.0.0.1 -p22</code></td><td>登录远程服务器</td></tr></tbody></table><ul><li>-p 后面是端口号</li><li>root 是服务器用户名</li><li><p>127.0.0.1 是服务器 ip<br>|<br>| <code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code> | 生成密钥 | |<br>| <code>cat ~/.ssh/id_rsa.pub</code> | 查看公钥 | |<br>| <code>ssh -T git@github.com</code> | 测试 SSH 是否生效 | |<br>| ssh-agent | 密钥管理器 | |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">  ssh-add ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>| 使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。 |  |<br>| <strong>node</strong> |  |  |<br>| <code>wget [https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz](https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz)</code> | 下载node |  |<br>| <code>tar xvf node-v6.9.5-linux-x64.tar.xz</code> | 解压到当前目录 |  |<br>| <code>ln -s /root/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node</code><br><code>ln -s /root/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm</code> | 创建软链接，使node和npm命令全局有效 |  |<br>| <strong>nvm</strong> | <strong>Node版本管理器</strong> |  |<br>| <code>nvm ls</code> | 列出Node.js的所有版本。 |  |<br>| <code>nvm use v4.9.1</code> | 切换node版本 |  |<br>| <strong>npm</strong> | <strong>Node包管理器</strong> |  |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">npm view node versions</span><br><span class="line">sudo n 10.14.2</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p></li></ul><p>或<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">npm view node versions</span><br><span class="line">sudo n stable</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p> | 升级 Node 版本 |  |<br>| <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">rm package-lock.json</span><br><span class="line">npm cache clear --force</span><br><span class="line">npm install</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>| 重新安装依赖 | |<br>| <code>npm config set registry [https://registry.npm.taobao.org](https://registry.npm.taobao.org)</code> | 配置淘宝镜像 | |</p><h2 id="文本编辑器-vi-vim"><a href="#文本编辑器-vi-vim" class="headerlink" title="文本编辑器 vi/vim"></a>文本编辑器 vi/vim</h2><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>命令模式</strong></td><td>用户刚刚启动 vi/vim，便进入了命令模式。</td></tr><tr><td><code>i</code></td><td>切换到输入模式，以输入字符。</td></tr><tr><td><code>x</code></td><td>删除当前光标所在处的字符。</td></tr><tr><td><code>:</code></td><td>切换到底线命令模式，以在最底一行输入命令。</td></tr><tr><td><strong>输入模式</strong></td><td>在命令模式下按下 i 就进入了输入模式。</td></tr><tr><td>字符按键以及 Shift 组合</td><td>输入字符</td></tr><tr><td>ENTER</td><td>回车键，换行</td></tr><tr><td>BACK SPACE</td><td>退格键，删除光标前一个字符</td></tr><tr><td>DEL</td><td>删除键，删除光标后一个字符</td></tr><tr><td>方向键</td><td>在文本中移动光标</td></tr><tr><td>HOME/END</td><td>移动光标到行首/行尾</td></tr><tr><td>Page Up/Page Down</td><td>上/下翻页</td></tr><tr><td>Insert</td><td>切换光标为输入/替换模式，光标将变成竖线/下划线</td></tr><tr><td>ESC</td><td>退出输入模式，切换到命令模式</td></tr><tr><td><strong>底线命令模式</strong></td><td>在命令模式下按下:（英文冒号）就进入了底线命令模式。</td></tr><tr><td><code>q</code></td><td>退出程序</td></tr><tr><td><code>w</code></td><td>保存文件</td></tr></tbody></table><p><a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener">史上最全 Vim 快捷键键位图（入门到进阶） | 菜鸟教程</a></p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><table><thead><tr><th><strong>快捷键</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>Ctrl + a</code></td><td>光标到开头</td></tr><tr><td><code>Ctrl + c</code></td><td>中断当前程序</td></tr><tr><td><code>Ctrl + d</code></td><td>退出当前窗口或当前用户</td></tr><tr><td><code>Ctrl + e</code></td><td>光标到结尾</td></tr><tr><td><code>Ctrl + l</code></td><td>清屏 相当与 clear</td></tr><tr><td><code>Ctrl + u</code></td><td>剪切、删除（光标以前的）内容</td></tr><tr><td><code>Ctrl + k</code></td><td>剪切、删除（光标以后的）内容</td></tr><tr><td><code>Ctrl + r</code></td><td>查找（最近用过的命令）</td></tr><tr><td><code>tab</code></td><td>所有路径以及补全命令</td></tr><tr><td><code>Ctrl+shift+c</code></td><td>命令行复制内容</td></tr><tr><td><code>Ctrl+shift+v</code></td><td>命令行粘贴内容</td></tr><tr><td><code>Ctrl + q</code></td><td>取消屏幕锁定</td></tr><tr><td><code>Ctrl + s</code></td><td>执行屏幕锁定</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.ruanyifeng.com/blog/2022/01/cli-alternative-tools.html" target="_blank" rel="noopener">命令行常用工具的替代品 - 阮一峰的网络日志</a><br><a href="https://juejin.cn/post/6844903930166509581#heading-140" target="_blank" rel="noopener">45 个常用 Linux 命令，让你轻松玩转 Linux！ - 掘金</a><br><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux 命令大全 | 菜鸟教程</a><br><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html" target="_blank" rel="noopener">Linux 常用命令学习 | 菜鸟教程</a><br><a href="https://developer.aliyun.com/article/842453" target="_blank" rel="noopener">Linux 常用命令详细大全（面试常考）-阿里云开发者社区</a><br><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html" target="_blank" rel="noopener">50 个最常用的 Unix/Linux 命令 - GongYong</a><br><a href="https://www.liuxing.io/blog/curl/" target="_blank" rel="noopener">Curl 使用指南</a><br><a href="https://blog.devhitao.com/2020/01/18/homebrew-usage/" target="_blank" rel="noopener">Homebrew 安装、使用、升级和卸载</a><br><a href="https://www.jianshu.com/p/53a7d11a7250" target="_blank" rel="noopener">报错：Failed to upgrade Homebrew Portable Ruby</a></p><hr><p>最后，重学前端，将思考固定下来。</p><ul><li>笔记和记忆力是提高开发效率的最好方法。</li><li>如果没有对旧事物进行大量练习，你不太可能发现新事物。</li><li>努力学习最感兴趣的东西。<blockquote><p>©️ 版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/songxingguo/devhints/vtheqvmkw27cx4k8" target="_blank" rel="noopener">原文地址-语雀</a></p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git指令速查🚀</title>
      <link href="/2023/04/29/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/"/>
      <url>/2023/04/29/Git%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5%F0%9F%9A%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FojivBC2iy6WcdLcl88n9CGxYQje.jpeg" alt></p><blockquote><p>文中 Git 相关术语都来源于中文版 Sourcetree。</p></blockquote><a id="more"></a><h1 id="Git-指令"><a href="#Git-指令" class="headerlink" title="Git 指令"></a>Git 指令</h1><h2 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h2><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>版本信息</strong></td><td></td></tr><tr><td>git –version</td><td>git 版本</td></tr><tr><td><strong>指令帮助</strong></td><td></td></tr><tr><td>git [指令] -h</td><td>查看指令帮助信息</td></tr><tr><td>git [指令] –help</td><td>打开指令详细帮助页面</td></tr><tr><td><strong>查看日志：</strong></td><td></td></tr><tr><td>git log -n20</td><td>查看日志(最近 20 条)，可省略 n 为-20；参数–graph 可视化显示分支关系</td></tr><tr><td>git log –follow [file]</td><td>显示某个文件的版本历史，包括文件改名</td></tr><tr><td>git log -n20 –graph</td><td>参数“–graph”可视化显示分支关系</td></tr><tr><td>git log –follow [file]</td><td>显示某个文件的版本历史</td></tr><tr><td>git reflog</td><td>查看所有可用的历史版本记录（实际是 HEAD 变更记录），包含被回退的记录，常用来撤销回退</td></tr><tr><td>git blame [file]</td><td>以列表形式查看指定文件的历史修改记录</td></tr><tr><td><strong>格式化日志</strong></td><td></td></tr><tr><td>git log -n20 –oneline</td><td>参数“–oneline”可以让日志输出更简洁（一行）</td></tr><tr><td>git log –pretty=oneline</td><td>一行显示提交信息</td></tr><tr><td><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FuWCRNpZRL3DthGQmtXZ2PmEXWhC.png" alt></td></tr><tr><td>git log –pretty=format:”%h %s” –graph</td><td>自定义输出格式</td></tr><tr><td><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi3loaRpO70Ko7Lj8TKZX9StjUbr.png" alt></td></tr><tr><td><strong>筛选日志</strong></td><td></td></tr><tr><td>git log –pretty=format:”%s” –since=”2019-07-17 07:36pm” –until=”2019-07-29 08:28pm”</td><td>查询指定时间区间的提交</td></tr><tr><td>git log –pretty=format:”%s” –since=”2019-07-17 07:36pm” –until=”2019-07-29 08:28pm” –grep=”feat”</td><td>查询包含指定字段的提交</td></tr><tr><td><strong>导出日志</strong></td><td></td></tr><tr><td>git log &gt; log.txt</td><td>导出 Git log 日志</td></tr><tr><td>git log –pretty=format:”%s” –graph –since=”2019-10-14 02 18 pm” –grep=”feat” &gt; log.txt</td><td>同上，日志格式化后导出日志</td></tr><tr><td><strong>创建仓库</strong></td><td></td></tr><tr><td>git init [文件目录]</td><td>初始化创建 Git 仓库，如果不指定[文件目录]，则在当前目录创建</td></tr><tr><td><strong>Git 配置</strong></td><td></td></tr><tr><td>git config –list</td><td>查看配置信息，包括系统（–system）+全局（–global）+项目（–local）配置</td></tr><tr><td>git config –list –system</td><td>查看系统配置，全局（–global）、项目（–local）配置配置类似</td></tr><tr><td>git config –global user.name “名称”</td><td>配置用户名</td></tr><tr><td>git config –global user.email “邮箱”</td><td>配置邮箱</td></tr><tr><td><strong>查看文件</strong></td><td></td></tr><tr><td>cat [file]</td><td>读取一个文件，展示其文件内容</td></tr></tbody></table><h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><p>本地操作<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fi1V3kEfywqqGsGVyTMiHF2CCh2D.png" alt></p><h3 id="指令-代码"><a href="#指令-代码" class="headerlink" title="指令-代码"></a>指令-代码</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>状态</strong></td><td></td></tr><tr><td>git status</td><td>查看本地仓库状态，加参数-s 简洁模式</td></tr><tr><td><strong>添加到/移除暂存区</strong></td><td></td></tr><tr><td>git add [file1] [file2]</td><td>添加文件到暂存区，包括修改的文件、新增的文件</td></tr><tr><td>git add [dir]</td><td>同上，添加目录到暂存区，包括子目录</td></tr><tr><td>git add .</td><td>同上，添加所有修改、新增文件（未跟踪）到暂存区</td></tr><tr><td>git rm [file]</td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><strong>提交到工作区</strong></td><td></td></tr><tr><td>git commit -m “说明”</td><td>‘说明’ 提交变更，参数-m 设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td></tr><tr><td>git commit -a</td><td>参数-a，表示直接从工作区提交到版本库，略过了 git add 步骤，不包括新增的文件</td></tr><tr><td>git commit [file]</td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td>git commit –amend -m</td><td>使用一次新的 commit，替代上一次提交，会修改 commit 的 hash 值（id）</td></tr></tbody></table><h3 id="指令-提交"><a href="#指令-提交" class="headerlink" title="指令-提交"></a>指令-提交</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>拣选提交</strong></td><td></td></tr><tr><td>git cherry-pick [commit]</td><td>拣选提交，复制一个特定的提交到当前分支，而不管这个提交在哪个分支</td></tr><tr><td><strong>整理提交</strong></td><td></td></tr><tr><td>git rebase master</td><td>将当前分支变基合并到 master 分支， 注意 ⚠️ 只在从未推送至共用仓库的提交上执行变基命令。</td></tr><tr><td><strong>重置提交</strong></td><td></td></tr><tr><td>git reset</td><td>撤销暂存区状态，同 git reset HEAD，不影响工作区，默认使用混合重置(mixed)模式</td></tr><tr><td>git reset HEAD [file]</td><td>同上，指定文件 file，HEAD 可省略</td></tr><tr><td>git reset [commit]</td><td>回退到指定版本，清空暂存区，不影响工作区。工作区需要手动 git checkout 签出</td></tr><tr><td>git reset –soft [commit]</td><td>移动分支 master、HEAD 到指定的版本，不影响暂存区、工作区，需手动 git checkout 签出更新</td></tr><tr><td>git reset –hard HEAD</td><td>撤销工作区、暂存区的修改，用当前最新版</td></tr><tr><td>git reset –hard HEAD~</td><td>回退到上一个版本，并重置工作区、暂存区内容</td></tr><tr><td>git reset –hard [commit]</td><td>回退到指定版本，并重置工作区、暂存区内容，举例：<code>git reset --hard 7678a31</code></td></tr><tr><td><strong>撤销提交</strong></td><td></td></tr><tr><td>git revert [commit]</td><td>撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已 push 则重新 push 即可</td></tr></tbody></table><h3 id="指令-储藏"><a href="#指令-储藏" class="headerlink" title="指令-储藏"></a>指令-储藏</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看暂存</strong></td><td></td></tr><tr><td>git stash list</td><td>查看所有被隐藏的内容列表</td></tr><tr><td>储藏<strong>代码</strong></td><td></td></tr><tr><td>git stash save “message”</td><td>同 git stash，可以备注说明 message git stash apply 恢复被隐藏的文件，但是隐藏记录不删除</td></tr><tr><td>git stash</td><td>把未提交内容隐藏起来，包括未暂存、已暂存。 等以后恢复现场后继续工作</td></tr><tr><td><strong>恢复代码</strong></td><td></td></tr><tr><td>git stash pop</td><td>恢复被隐藏的内容，同时删除隐藏记录</td></tr><tr><td><strong>删除</strong>储藏</td><td></td></tr><tr><td>git stash drop</td><td>删除隐藏记录</td></tr></tbody></table><h2 id="远程交互"><a href="#远程交互" class="headerlink" title="远程交互"></a>远程交互</h2><p>远程交互<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FtfIh_8MpJOKVw4wChaxrxqruY-m.png" alt></p><h3 id="指令-仓库"><a href="#指令-仓库" class="headerlink" title="指令-仓库"></a>指令-仓库</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看/新建/修改/删除仓库</strong></td><td></td></tr><tr><td>git remote -v</td><td>查看所有远程仓库，不带参数-v 只显示名称</td></tr><tr><td>git remote show [remote]</td><td>显示某个远程仓库的信息</td></tr><tr><td>git remote add [name] [url]</td><td>增加一个新的远程仓库，并命名</td></tr><tr><td>git remote rename [old] [new]</td><td>修改远程仓库名称</td></tr><tr><td>git remote rm [remote-name]</td><td>删除远程仓库</td></tr><tr><td><strong>克隆仓库</strong></td><td></td></tr><tr><td>git clone [git 地址]</td><td>从远程仓库克隆到本地（当前目录）</td></tr><tr><td><strong>拉取仓库</strong></td><td></td></tr><tr><td>git pull [remote] [branch]</td><td>取回远程仓库的变化，并与本地版本合并</td></tr><tr><td>git pull</td><td>同上，针对当前分支</td></tr><tr><td>git pull –rebase</td><td>使用 rebase 的模式进行合并</td></tr><tr><td>git fetch [remote]</td><td>获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td></tr><tr><td><strong>推送仓库</strong></td><td></td></tr><tr><td>git push</td><td>推送当前分支到远程仓库</td></tr><tr><td>git push [remote] [branch]</td><td>推送本地当前分支到远程仓库的指定分支</td></tr><tr><td>git push [remote] –force/-f</td><td>强行推送当前分支到远程仓库，即使有冲突，⚠️ 很危险！</td></tr><tr><td>git push [remote] –all</td><td>推送所有分支到远程仓库</td></tr><tr><td>git push –u</td><td>参数–u 表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td></tr></tbody></table><h3 id="指令-分支"><a href="#指令-分支" class="headerlink" title="指令-分支"></a>指令-分支</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>分支查询</strong></td><td></td></tr><tr><td>git branch</td><td>列出所有本地分支，加参数-v 显示详细列表，下同</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支，用不同颜色区分</td></tr><tr><td><strong>分支新建</strong></td><td></td></tr><tr><td>git branch [branch-name]</td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git branch [branch] [commit]</td><td>新建一个分支，指向指定 commit id</td></tr><tr><td>git branch –track [branch] [remote-branch]</td><td>新建一个分支，与指定的远程分支建立关联</td></tr><tr><td><strong>分支切换</strong></td><td></td></tr><tr><td>git checkout .</td><td>撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td></tr><tr><td>git checkout [file]</td><td>同上，file 指定文件</td></tr><tr><td>git checkout HEAD .</td><td>撤销工作区、暂存区的修改，用 HEAD 指向的当前分支最新版本替换工作区、暂存区</td></tr><tr><td>git checkout HEAD [file]</td><td>同上，file 指定文件</td></tr><tr><td>git checkout -b dev</td><td>从当前分支创建并切换到 dev 分支</td></tr><tr><td>git checkout -b feature1 dev</td><td>从本地 dev 分支代码创建一个 feature1 分支，并切换到新分支</td></tr><tr><td>git checkout -b hotfix remote hotfix</td><td>从远端 remote 的 hotfix 分支创建本地 hotfix 分支</td></tr><tr><td><strong>分支切换：</strong>✅switch：新的分支切换指令，切换功能和 checkout 一样，switch 只单纯的用于切换</td><td></td></tr><tr><td>git switch master</td><td>切换到已有的 master 分支</td></tr><tr><td>git switch -c dev</td><td>创建并切换到新的 dev 分支</td></tr><tr><td><strong>分支合并</strong></td><td></td></tr><tr><td>git merge [branch]</td><td>合并指定分支到当前分支</td></tr><tr><td>git merge –no-ff dev</td><td>合并 dev 分支到当前分支，参数–no-ff 禁用快速合并模式</td></tr><tr><td><strong>分支删除</strong></td><td></td></tr><tr><td>git branch -d dev</td><td>删除 dev 分支，-D（大写）强制删除</td></tr><tr><td>git push origin –delete [branch-name]</td><td>删除远程分支</td></tr><tr><td>git branch -r</td><td>grep ‘origin/dependabot’</td><td>sed ‘s/origin\///g’</td><td>xargs -I {} git push origin :{}</td><td>批量删除远端分支</td></tr><tr><td><strong>跟踪分支</strong></td><td></td></tr><tr><td>git branch –set-upstream [branch] [remote-branch]</td><td>在现有分支与指定的远程分支之间建立跟踪关联：</td></tr></tbody></table><p><code>git branch --set-upstream hotfix remote/hotfix git checkout [branch-name]</code><br>切换到指定分支，并更新工作区 |</p><h3 id="指令-标签"><a href="#指令-标签" class="headerlink" title="指令-标签"></a>指令-标签</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>查看标签</strong></td><td></td></tr><tr><td>git tag</td><td>查看标签列表</td></tr><tr><td>git tag -l ‘a*‘</td><td>查看名称是“a”开头的标签列表，带查询参数</td></tr><tr><td>git show [tagname]</td><td>查看标签信息</td></tr><tr><td><strong>创建标签</strong></td><td></td></tr><tr><td>git tag [tagname]</td><td>创建一个标签，默认标签是打在最新提交的 commit 上的</td></tr><tr><td>git tag [tagname] <commit id></commit></td><td>新建一个 tag 在指定 commit 上</td></tr><tr><td>git tag -a v5.1 -m’v5.1 版本’</td><td>创建标签 v5.1.1039，-a 指定标签名，-m 指定说明文字</td></tr><tr><td><strong>切换标签</strong></td><td></td></tr><tr><td>git checkout v5.1.1039</td><td>切换标签，同切换分支</td></tr><tr><td><strong>推送标签</strong></td><td></td></tr><tr><td>git push [remote] v5.1</td><td>推送标签，标签不会默认随代码推送推送到服务端</td></tr><tr><td>git push [remote] –tags</td><td>提交所有 tag</td></tr><tr><td><strong>删除标签</strong></td><td></td></tr><tr><td>git tag -d [tagname]</td><td>删除本地标签</td></tr></tbody></table><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="指令-bisect"><a href="#指令-bisect" class="headerlink" title="指令-bisect"></a>指令-bisect</h3><blockquote><p>git bisect 是一个很有用的命令，执行一个二分搜索，用来查找哪一次代码提交引入了错误。</p></blockquote><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FlyEWYZF1R8tq_oF5hPeYqRn9Mxn.png" alt></p><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>git bisect start [终点] [起点]</td><td>启动查错，举例：<code>git bisect start HEAD 4d83cf</code></td></tr><tr><td>git bisect good</td><td>标识本次提交没有问题</td></tr><tr><td>git bisect bad</td><td>标识本次提交有问题</td></tr><tr><td>git bisect reset</td><td>退出查错，回到最近一次的代码提交</td></tr></tbody></table><h3 id="指令-diff"><a href="#指令-diff" class="headerlink" title="指令-diff"></a>指令-diff</h3><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>git diff</td><td>查看暂存区和工作区的差异，举例<code>git diff 595d0dc11b6b34668b1620de2c29a313b024092c 1855846d6b49c2f4e3d7a05e4b9d76b9d435b4b9</code></td></tr><tr><td>git diff [file]</td><td>同上，指定文件</td></tr><tr><td>git diff –cached</td><td>查看已暂存的改动，就是暂存区与新版本 HEAD 进行比较</td></tr><tr><td>git diff –staged</td><td>同上</td></tr><tr><td>git diff –cached [file]</td><td>同上，指定文件</td></tr><tr><td>git diff HEAD</td><td>查看已暂存的+未暂存的所有改动，就是与最新版本 HEAD 进行比较</td></tr><tr><td>git diff HEAD~</td><td>同上，与上一个版本比较。HEAD~表示上一个版本，HEAD~10 为最近第 10 个版本</td></tr><tr><td>git diff [id] [id]</td><td>查看两次提交之间的差异</td></tr><tr><td>git diff [branch]</td><td>查看工作区和分支直接的差异</td></tr></tbody></table><h3 id="指令-submodule"><a href="#指令-submodule" class="headerlink" title="指令-submodule"></a>指令-submodule</h3><blockquote><p>子模块是链接；子树是复制的。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/143100657" target="_blank" rel="noopener">使用子模块和子树来管理 Git 项目</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆初始化模块，其中&#123;MOD_NAME&#125;为模块目录，执行后可发现模块目录被清空</span></span><br><span class="line">git submodule deinit &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span></span><br><span class="line">git rm --cached &#123;MOD_NAME&#125;</span><br><span class="line"><span class="comment"># 提交更改到代码库，可观察到'.gitmodules'内容发生变更</span></span><br><span class="line">git commit -am <span class="string">"Remove a submodule."</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git submodule deinit -f path/to/submodule</span><br><span class="line">rm -rf .git/modules/path/to/submodule</span><br><span class="line">git rm -f path/to/submodule</span><br></pre></td></tr></table></figure><p><a href="https://murphypei.github.io/blog/2018/09/git-delete-submodule" target="_blank" rel="noopener">Git 删除子模块和远程分支</a></p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h2><ul><li>多建分支，没有什么是新建一个分支无法解决的。</li><li>多提交代码，方便后续如果有问题可以进行快速回滚。</li><li>善于使用变基命令整理没有推送的提交，让提交记录更加整洁。注意 ⚠️<strong>只在从未推送至共用仓库的提交上执行变基命令</strong>。</li></ul><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>Git Flow<img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fn2kcc6kKLjHaEHQ0Ge_YooUUnov.png" alt></p><h1 id="Git-练习场"><a href="#Git-练习场" class="headerlink" title="Git 练习场"></a>Git 练习场</h1><ul><li>，Git 在线练习。</li><li>，Git 学习网站，通过示例仓库，提供一系列 Git 的小练习，帮助用户掌握这个版本管理工具。</li></ul><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu?view=doc_embed" target="_blank" rel="noopener">Git 入门图文教程(1.5W 字 40 图)🔥</a><br><a href="https://www.yuque.com/kanding/ktech/ai3d3ky8f0dgixto?view=doc_embed" target="_blank" rel="noopener">Git 常用指令集合 🔥🔥</a></p><p><a href="https://www.yuque.com/kanding/ktech/ng8w19?view=doc_embed" target="_blank" rel="noopener">📖ProGit-Git 教程</a></p><p><a href="https://www.yuque.com/xavior.wx/blog/git-review?view=doc_embed&amp;inner=b87ebc48" target="_blank" rel="noopener">git 使用学习总结</a></p><hr><p>最后，重学前端，将思考固定下来。</p><ul><li>笔记和记忆力是提高开发效率的最好方法。</li><li>如果没有对旧事物进行大量练习，你不太可能发现新事物。</li><li>努力学习最感兴趣的东西。<blockquote><p>©️ 版权申明：版权所有@宋玉，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/songxingguo/devhints/bw0kwn12a6af5yg9" target="_blank" rel="noopener">原文地址-语雀</a></p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何将语雀文章发布到Hexo博客</title>
      <link href="/2023/02/07/%E5%A6%82%E4%BD%95%E5%B0%86%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/02/07/%E5%A6%82%E4%BD%95%E5%B0%86%E8%AF%AD%E9%9B%80%E6%96%87%E7%AB%A0%E5%8F%91%E5%B8%83%E5%88%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>实现语雀上的文章自动化发布到个人博客，首先是因为语雀本身是一个优秀的创作的平台，能方便的编辑和管理文章，但缺点是它本身是一个封闭的系统，就像微信公众号一样，不利于 SEO。其次个人博客是由自己搭建，没有任何限制，也能更好的进行 SEO。基于这两点原因，语雀+个人博客就是一个完美的组合，个人博客作为前台，语雀作为后台，既能很好的创造和管理文章，有能够将需要共享的文章发布到个人博客，供大家搜索。下面要做的就是建立起两者的桥梁。</p><a id="more"></a><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ul><li><a href="https://github.com/songxingguo/songxingguo.github.io" target="_blank" rel="noopener">项目地址</a></li><li>使用效果（视频）<br><a href="https://www.yuque.com/songxingguo/devhints/gwpsg4dq6tp27z3s?_lake_card=%7B%22status%22%3A%22done%22%2C%22name%22%3A%22%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62023-02-09%2019.39.30.mov%22%2C%22size%22%3A204453355%2C%22taskId%22%3A%22ua4cb8283-502b-4a55-b53e-7f0a9dd0a84%22%2C%22taskType%22%3A%22upload%22%2C%22url%22%3Anull%2C%22cover%22%3Anull%2C%22videoId%22%3A%22inputs%2Fprod%2Fyuque%2F2023%2F394169%2Fmov%2F1675943595043-2a636a15-97b2-4fd2-9038-a34841d5d6a3.mov%22%2C%22download%22%3Afalse%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pqOSi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22video%22%7D#pqOSi" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FvYEuJlUXy5ADawCvwN-yUw1zlI_.com/mdn/prod_resou/afts/img/A*NNs6TKOR3isAAAAAAAAAAABkARQnAQ" alt></a></li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FlChHeNiAySN1-R3hmWCTrVo3BxH.jpeg" alt><br>整体的设计思路是每次语雀更新文档都通过 Webhook 发送钉钉消息，当手动点击【发布】的时候再触发 GithubAction 将 slug 对应的文章从语雀拉取下去并推送到博客仓库，最后部署博客。触发流程虽然是从语雀到 Github 的过程，但开发的过程是优先处理 Github 部分然后再由语雀触发 Webhook，开发过程主要包括以下几个步骤。</p><ol><li>配置<code>yuque-heox-publish</code></li><li>配置<code>.github/workflows/publish.yml</code></li><li>使用云函数触发 GithubAction</li><li>使用云函数推送钉钉消息</li><li>配置语雀 Webhook</li></ol><h3 id="yuque-hexo-publish是什么"><a href="#yuque-hexo-publish是什么" class="headerlink" title="yuque-hexo-publish是什么"></a><code>yuque-hexo-publish</code>是什么</h3><p><code>[yuque-hexo](https://github.com/x-cold/yuque-hexo)</code>是一个很优秀的插件，能将语雀的文章完全<strong>同步</strong>到个人博客上。但这并不满足我的需求，我需要的是发布而不是同步，我并不想把所有文章都<strong>同步</strong>到个人博客上，也不希望只能有一个知识库里面的文章能<strong>发布</strong>到个人博客，而是希望能把我想发布的文章都能<strong>发布</strong>到个人博客上。基于这个这个考虑我在<code>yuque-hexo</code>的基础上新增了发布功能，<code>yuque-hexo-publish</code>就此诞生了。yuque-hexo-publish 在功能上和 yuque-hexo 是完全一致的，只是新增了命令 publish。</p><h2 id="具体实施"><a href="#具体实施" class="headerlink" title="具体实施"></a>具体实施</h2><h3 id="Hexo-博客开发"><a href="#Hexo-博客开发" class="headerlink" title="Hexo 博客开发"></a>Hexo 博客开发</h3><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><ol><li><code>package.json</code>中配置 yuque-hexo-publish。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">"yuqueConfig":</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">"postPath":</span> <span class="string">"source/_posts"</span><span class="string">,</span> <span class="string">//文章目录</span></span><br><span class="line">  <span class="attr">"baseUrl":</span> <span class="string">"https://www.yuque.com/api/v2"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"login":</span> <span class="string">"songxingguo"</span><span class="string">,//用户名</span></span><br><span class="line">  <span class="attr">"repo":</span> <span class="string">"devhints"</span><span class="string">,</span> <span class="string">//知识库名称</span></span><br><span class="line">  <span class="attr">"onlyPublished":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"onlyPublic":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"imgCdn":</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"concurrency":</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"imageBed":</span> <span class="string">"github"</span><span class="string">,</span> <span class="string">//图床类型</span></span><br><span class="line">    <span class="attr">"enabled":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="attr">"bucket":</span> <span class="string">"songxingguo.github.io"</span><span class="string">,</span> <span class="string">//仓库地址</span></span><br><span class="line">    <span class="attr">"prefixKey":</span> <span class="string">"static/images"</span> <span class="string">//图片文件上传到仓库后的目录</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>更详细的配置说明可以查看<code>[yuque-hexo-publish](https://github.com/songxingguo/yuque-hexo/tree/feature-publish)</code>。</p><ol start="2"><li><code>package.json</code>中添加任务脚本。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">  <span class="string">"pulish"</span>: <span class="string">"yuque-hexo publish"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="3"><li>根目录下新建<code>.github/workflows/publish.yml</code>。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">To</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[repository_dispatch]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">🛎️</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">"12.0.0"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">and</span> <span class="string">Build</span> <span class="string">🔧</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">YUQUE_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.YUQUE_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SLUG:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.client_payload.slug</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">SECRET_ID:</span> <span class="string">songxingguo</span></span><br><span class="line">          <span class="attr">SECRET_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">publish</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置Git用户名邮箱</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"songxingguo"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"1328989942@qq.com"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">提交yuque拉取的文章到GitHub仓库</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">pull</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"feat:提交文章"</span> <span class="string">-a</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">推送文章到仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">🚀</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">CLEAN:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>YUQUE_TOKE</code>和<code>ACCESS_TOKEN</code>都是 Github 的环境变量，<code>github.event.client_payload.slug</code>是<code>[repository_dispatch](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#repository_dispatch)</code>事件中传递的参数。</p><h4 id="如何本地调试"><a href="#如何本地调试" class="headerlink" title="如何本地调试"></a>如何本地调试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YUQUE_TOKEN=xxx SLUG=xxx yuque-hexo publish</span><br></pre></td></tr></table></figure><p><code>yuque-hexo publish</code>需要两个环境变量，<code>YUQUE_TOKEN</code>是语雀的<a href="https://www.yuque.com/settings/tokens" target="_blank" rel="noopener">授权码</a>，<code>SLUG</code>是语雀文章的 id。</p><h3 id="阿里云函数开发"><a href="#阿里云函数开发" class="headerlink" title="阿里云函数开发"></a>阿里云函数开发</h3><h4 id="初始化云函数"><a href="#初始化云函数" class="headerlink" title="初始化云函数"></a>初始化云函数</h4><ol><li>创建一个处理 http 请求的 node.js 云函数，<a href="https://fcnext.console.aliyun.com/cn-hangzhou/tasks" target="_blank" rel="noopener">云函数创建地址</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FmgXhivkd1GDSXivmeXk4GFgJ5mW.png" alt></p><ol start="2"><li>创建好后的效果如下。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fn9FBWVuiHojlCDdNBudsnalwEXs.png" alt></p><h4 id="调试云函数"><a href="#调试云函数" class="headerlink" title="调试云函数"></a>调试云函数</h4><ol><li>配置测试请求。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FrNF5Qqv5Z8c-GdIRsTEUU9fR6Rq.png" alt></p><ol start="2"><li>部署代码之后，点击【测试函数】，就可以看到日志输出。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fm13C_KkS6MOfXCgdToHQqHVS7-p.png" alt></p><h4 id="使用云函数触发-GithubAction"><a href="#使用云函数触发-GithubAction" class="headerlink" title="使用云函数触发 GithubAction"></a>使用云函数触发 GithubAction</h4><p>这个函数是通过 Get 请求进行调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//xx-xx-opbwmocbhe.cn-hangzhou.fcapp.run?slug=$&#123;slug&#125;`</span></span><br></pre></td></tr></table></figure><p>首先需要从参数中获取 slug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> slug = params.queries.slug;</span><br></pre></td></tr></table></figure><p>然后使用<code>[repository_dispatch](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows#repository_dispatch)</code>事件触发 GithubAction，并将<code>slug</code>传给<code>client_payload</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"https://api.github.com/repos/songxingguo/songxingguo.github.io/dispatches"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    Accept: <span class="string">"application/vnd.github+json"</span>,</span><br><span class="line">    Authorization: <span class="string">"Bearer GITHUB_TOKEN"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123; <span class="attr">event_type</span>: <span class="string">"publish"</span>, <span class="attr">client_payload</span>: &#123; slug &#125; &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .request(options)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>其中<code>GITHUB_TOKEN</code>是 github 的授权码，获取和配置可以参考<a href="https://www.yuque.com/songxingguo/devhints/tfub27hk86lsdrpb" target="_blank" rel="noopener">使用 Github Action 部署静态网站</a>。<code>event_type</code>是活动类型这个和<code>.github/workflows/publish.yml</code>里面的<code>types</code>是一一对应的，如果<code>.github/workflows/publish.yml</code>中没有指定具体<code>types</code>，那这儿填任何值都是可以。更多信息可以查看<a href="https://docs.github.com/zh/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#repository_dispatch" target="_blank" rel="noopener">详细配置</a>。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FveEzFT5TggObDiemqVIn5zlRzAd.png" alt><br>完整代码如下。</p><blockquote><p>需要注意 ⚠️ 异步执行的问题，可以通过<code>async-await</code>保证请求是在<code>resp.send</code>之前执行的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"><span class="keyword">var</span> getRawBody = <span class="built_in">require</span>(<span class="string">"raw-body"</span>);</span><br><span class="line"><span class="keyword">var</span> getFormBody = <span class="built_in">require</span>(<span class="string">"body/form"</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">require</span>(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">To enable the initializer feature (https://help.aliyun.com/document_detail/156876.html)</span></span><br><span class="line"><span class="comment">please implement the initializer function as below：</span></span><br><span class="line"><span class="comment">exports.initializer = (context, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log('initializing');</span></span><br><span class="line"><span class="comment">  callback(null, '');</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">req, resp, context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    path: req.path,</span><br><span class="line">    queries: req.queries,</span><br><span class="line">    headers: req.headers,</span><br><span class="line">    method: req.method,</span><br><span class="line">    requestURI: req.url,</span><br><span class="line">    clientIP: req.clientIP,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getRawBody(req, <span class="keyword">async</span> (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> req.queries) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = req.queries[key];</span><br><span class="line">      resp.setHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">    params.body = body.toString();</span><br><span class="line">    <span class="keyword">const</span> slug = params.queries.slug;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"slug"</span>, slug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      method: <span class="string">"POST"</span>,</span><br><span class="line">      url: <span class="string">"https://api.github.com/repos/songxingguo/songxingguo.github.io/dispatches"</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        Accept: <span class="string">"application/vnd.github+json"</span>,</span><br><span class="line">        Authorization: <span class="string">"Bearer xxx"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      data: &#123; <span class="attr">event_type</span>: <span class="string">"publish"</span>, <span class="attr">client_payload</span>: &#123; slug &#125; &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">      .request(options)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    resp.send(<span class="built_in">JSON</span>.stringify(params, <span class="literal">null</span>, <span class="string">"    "</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用云函数推送钉钉消息"><a href="#使用云函数推送钉钉消息" class="headerlink" title="使用云函数推送钉钉消息"></a>使用云函数推送钉钉消息</h4><h5 id="调试钉钉消息类型及数据格式"><a href="#调试钉钉消息类型及数据格式" class="headerlink" title="调试钉钉消息类型及数据格式"></a>调试钉钉消息类型及数据格式</h5><ol><li>创建钉钉机器人，并复制 webhook 地址。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FhiBRGA1W_Z4-GzqzjiH5esIggKG.png" alt></p><ol start="2"><li>打开<a href="https://hoppscotch.io/" target="_blank" rel="noopener">在线接口调试工具</a>，输入 Webhook 地址，配置钉钉<a href="https://open.dingtalk.com/document/robots/custom-robot-access#title-72m-8ag-pqw" target="_blank" rel="noopener">消息类型及数据格式</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FqEYt6cimbEW4pJDET2YEsevO3bQ.png" alt></p><ol start="3"><li>调试到自己想要的效果后复制请求的代码。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FqxbJqsBt0_l1REj_8luZiqzFBxH.png" alt></p><hr><p>这个函数是通过 post 请求进行调用，首先需要从请求体中获取<code>slug</code>和<code>title</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(params.body);</span><br><span class="line"><span class="keyword">const</span> &#123; slug, title &#125; = data.data;</span><br></pre></td></tr></table></figure><p>然后再请求钉钉机器人的 Webhook 地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  url: <span class="string">"https://oapi.dingtalk.com/robot/send"</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    access_token: <span class="string">""</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  headers: &#123; <span class="string">"content-type"</span>: <span class="string">"application/json"</span> &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msgtype: <span class="string">"actionCard"</span>,</span><br><span class="line">    actionCard: &#123;</span><br><span class="line">      title: <span class="string">"文档发布"</span>,</span><br><span class="line">      text: <span class="string">`<span class="subst">$&#123;title&#125;</span>`</span>,</span><br><span class="line">      btnOrientation: <span class="string">"0"</span>,</span><br><span class="line">      btns: [</span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"发布"</span>,</span><br><span class="line">          actionURL: <span class="string">`https://xx-xx-xx.cn-hangzhou.fcapp.run?slug=<span class="subst">$&#123;slug&#125;</span>`</span>,</span><br><span class="line">        &#125;, <span class="comment">// 触发GithubAction云函数的公网地址</span></span><br><span class="line">        &#123;</span><br><span class="line">          title: <span class="string">"Actions"</span>,</span><br><span class="line">          actionURL:</span><br><span class="line">            <span class="string">"https://github.com/songxingguo/songxingguo.github.io/actions"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .request(options)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>其中<code>access_token</code>为钉钉 webhook 地址中的授权码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//oapi.dingtalk.com/robot/send?access_token=xx</span></span><br></pre></td></tr></table></figure><p>最终的效果如下所示。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FgwZMGzVe6xjsIMMsYyDrVxql0ku.png" alt><br>完整代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getRawBody = <span class="built_in">require</span>(<span class="string">"raw-body"</span>);</span><br><span class="line"><span class="keyword">var</span> getFormBody = <span class="built_in">require</span>(<span class="string">"body/form"</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">require</span>(<span class="string">"body"</span>);</span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">To enable the initializer feature (https://help.aliyun.com/document_detail/156876.html)</span></span><br><span class="line"><span class="comment">please implement the initializer function as below：</span></span><br><span class="line"><span class="comment">exports.initializer = (context, callback) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log('initializing');</span></span><br><span class="line"><span class="comment">  callback(null, '');</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">req, resp, context</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    path: req.path,</span><br><span class="line">    queries: req.queries,</span><br><span class="line">    headers: req.headers,</span><br><span class="line">    method: req.method,</span><br><span class="line">    requestURI: req.url,</span><br><span class="line">    clientIP: req.clientIP,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getRawBody(req, <span class="keyword">async</span> (err, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> req.queries) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = req.queries[key];</span><br><span class="line">      resp.setHeader(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">    resp.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">    params.body = body.toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(params.body);</span><br><span class="line">    <span class="keyword">const</span> &#123; slug, title &#125; = data.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"slug"</span>, slug);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      method: <span class="string">"POST"</span>,</span><br><span class="line">      url: <span class="string">"https://oapi.dingtalk.com/robot/send"</span>,</span><br><span class="line">      params: &#123;</span><br><span class="line">        access_token: <span class="string">""</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: &#123; <span class="string">"content-type"</span>: <span class="string">"application/json"</span> &#125;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msgtype: <span class="string">"actionCard"</span>,</span><br><span class="line">        actionCard: &#123;</span><br><span class="line">          title: <span class="string">"文档发布"</span>,</span><br><span class="line">          text: <span class="string">`<span class="subst">$&#123;title&#125;</span>`</span>,</span><br><span class="line">          btnOrientation: <span class="string">"0"</span>,</span><br><span class="line">          btns: [</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"发布"</span>,</span><br><span class="line">              actionURL: <span class="string">`https://xx-xx-xx.cn-hangzhou.fcapp.run?slug=<span class="subst">$&#123;slug&#125;</span>`</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              title: <span class="string">"Actions"</span>,</span><br><span class="line">              actionURL:</span><br><span class="line">                <span class="string">"https://github.com/songxingguo/songxingguo.github.io/actions"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> axios</span><br><span class="line">      .request(options)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    resp.send(<span class="built_in">JSON</span>.stringify(params, <span class="literal">null</span>, <span class="string">"    "</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="配置语雀-Webhook"><a href="#配置语雀-Webhook" class="headerlink" title="配置语雀 Webhook"></a>配置语雀 Webhook</h4><p>进入语雀<a href="https://www.yuque.com/songxingguo/devhints/settings/webhooks" target="_blank" rel="noopener">webhook 配置页面</a>，填写名称和<strong>推送钉钉消息</strong>云函数的公网地址，并选择<strong>更新文档</strong>时触发。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fmtzly3_0hghg_uvqaK6eDgmsT-M.png" alt></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Hoppscotch"><a href="#Hoppscotch" class="headerlink" title="Hoppscotch"></a><a href="https://hoppscotch.io/" target="_blank" rel="noopener">Hoppscotch</a></h3><p>Hoppscotch 和 postman 的功能是一样的，但这个是线上的版本，更加的方便。有时请求会出现请求无法到达的问题，需要配置插件代理，将请求的域名加入到插件中。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FkPke4qlMP1Zv2PALiW8f-dAATr5.png" alt></p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a><a href="https://www.yuque.com/songxingguo/devhints/gwpsg4dq6tp27z3s" target="_blank" rel="noopener">拓展阅读</a></h2><p><a href="https://www.yuque.com/1874w/1874.cool/ovugli?view=doc_embed" target="_blank" rel="noopener">Github Actions 持续集成 Docker 构建并部署 Node 项目到云服务器</a></p><p><a href="https://github.com/LetTTGACO/yuque-hexo-example" target="_blank" rel="noopener">yueque-hexo 图床配置</a></p><p><a href="https://www.yuque.com/1874w/1874.cool/roeayv?view=doc_embed" target="_blank" rel="noopener">语雀云端写作 Hexo+Github Actions+COS 持续集成</a><br><a href="https://www.yuque.com/yuque/developer/doc-webhook?view=doc_embed" target="_blank" rel="noopener">Webhooks</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建在线个人简历</title>
      <link href="/2023/02/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2023/02/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%9C%A8%E7%BA%BF%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>做这个在线简历是出于两点考虑。</p><ul><li>word 文档式的简历没有办法展示到网上，不能体现我作为一个前端开发工程师的专长。</li><li>之前也写过一个在线简历，但是现在不好维护了。主要原因是之前使用 Webpack 打包，对于一个简历的小项目来说比较重。然后之前的图床是使用七牛云进行存储的，但现在七牛云所有域名都需要备案，我之前的域名地址也被莫名其妙（😡）的被删除了，已经无力去维护。如果后面有时间和精力再进行升级优化吧。</li></ul><p>基于上面的两点考虑，我决定做一个简单的且易于维护的在线简历。这次打包采用了开箱即用的<a href="https://parceljs.org/" target="_blank" rel="noopener">parceljs</a>，对于在线简历这个小项目正好合适。而且这次简历依然是使用了模版引擎<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ejs</a>，让数据和模版分离，通过 json 文件来配置简历，在设计思想上这个参考了<a href="https://jsonresume.org/" target="_blank" rel="noopener">Json-Resume</a>，在样式上参考了<a href="https://shoyuf.top/resume" target="_blank" rel="noopener">SHOYUF</a>的简历。</p><a id="more"></a><h3 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h3><ul><li>如果不想从零开始配置就可以直接下载<code>[example](https://github.com/sarscode/parcel-transformer-ejs)</code>运行。</li><li>该项目的<a href="https://github.com/songxingguo/resume" target="_blank" rel="noopener">开源地址</a>在 github 上，分支为<code>feature-ejs</code>。</li><li>如果想将简历发布到线上可以参考<a href="https://www.yuque.com/songxingguo/devhints/tfub27hk86lsdrpb" target="_blank" rel="noopener">使用 Github Action 部署静态网站</a>。</li></ul><h2 id="从零开始搭建一个-MVP-项目"><a href="#从零开始搭建一个-MVP-项目" class="headerlink" title="从零开始搭建一个 MVP 项目"></a>从零开始搭建一个 MVP 项目</h2><h3 id="安装和配置parcel"><a href="#安装和配置parcel" class="headerlink" title="安装和配置parcel"></a>安装和配置<code>parcel</code></h3><ol><li>创建一个 resume 文件夹</li><li>使用 <code>npm init</code>初始化<code>package.json</code>，全部都选择默认选项。</li><li>安装<code>parcel</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev parcel</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>package.json</code>中添加任务脚本</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "parcel",</span><br><span class="line">    "build": "parcel build"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>新建 src 目录，并在目录下新建<code>index.ejs</code>文件，并在<code>index.ejs</code>中添加内容。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello parcel！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello parcel!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在配置<code>package.json</code>中配置 parcel 的入口文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"source": "src/index.ejs",</span><br></pre></td></tr></table></figure><h3 id="安装和配置parcel-transformer-ejs"><a href="#安装和配置parcel-transformer-ejs" class="headerlink" title="安装和配置parcel-transformer-ejs"></a>安装和配置<code>parcel-transformer-ejs</code></h3><ol start="6"><li>安装<code>parcel-transformer-ejs</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D parcel-transformer-ejs</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/parcel-transformer-ejs" target="_blank" rel="noopener">parcel-transformer-ejs</a> 是一个 ejs 转换器，将 ejs 转换成 html，这个库唯一的缺点就是修改了 json 配置文件之后，页面并没有更新，对开发效率还是影响蛮大的。</p><blockquote><p>现在的解决办法是，修改了<code>.ejsrc</code>再立即修改一下<code>index.ejs</code>就会更新页面了。</p></blockquote><ol start="7"><li>在根目录下新建<code>.parcelrc</code>，配置<a href="https://parceljs.org/" target="_blank" rel="noopener">parcel</a>转换器。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"@parcel/config-default"</span>],</span><br><span class="line">  <span class="attr">"transformers"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.ejs"</span>: [<span class="string">"parcel-transformer-ejs"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>在 src 目录下新建<code>.ejsrc</code>作为<strong>简历配置</strong>文件，json 格式可以参考<a href="https://jsonresume.org/schema/" target="_blank" rel="noopener">jsonresume</a>。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"basics"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">    <span class="attr">"label"</span>: <span class="string">"Programmer"</span>,</span><br><span class="line">    <span class="attr">"image"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"john@gmail.com"</span>,</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"(912) 555-4321"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://johndoe.com"</span>,</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"A summary of John Doe…"</span>,</span><br><span class="line">    <span class="attr">"location"</span>: &#123;</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"2712 Broadway St"</span>,</span><br><span class="line">      <span class="attr">"postalCode"</span>: <span class="string">"CA 94115"</span>,</span><br><span class="line">      <span class="attr">"city"</span>: <span class="string">"San Francisco"</span>,</span><br><span class="line">      <span class="attr">"countryCode"</span>: <span class="string">"US"</span>,</span><br><span class="line">      <span class="attr">"region"</span>: <span class="string">"California"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profiles"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"network"</span>: <span class="string">"Twitter"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"john"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://twitter.com/john"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"work"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="string">"President"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://company.com"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2014-01-01"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Started the company"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"volunteer"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"organization"</span>: <span class="string">"Organization"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="string">"Volunteer"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://organization.com/"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2012-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Awarded 'Volunteer of the Month'"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"education"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"institution"</span>: <span class="string">"University"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://institution.com/"</span>,</span><br><span class="line">      <span class="attr">"area"</span>: <span class="string">"Software Development"</span>,</span><br><span class="line">      <span class="attr">"studyType"</span>: <span class="string">"Bachelor"</span>,</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2011-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2013-01-01"</span>,</span><br><span class="line">      <span class="attr">"score"</span>: <span class="string">"4.0"</span>,</span><br><span class="line">      <span class="attr">"courses"</span>: [<span class="string">"DB1101 - Basic SQL"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"awards"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"Award"</span>,</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2014-11-01"</span>,</span><br><span class="line">      <span class="attr">"awarder"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"There is no spoon."</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"certificates"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Certificate"</span>,</span><br><span class="line">      <span class="attr">"date"</span>: <span class="string">"2021-11-07"</span>,</span><br><span class="line">      <span class="attr">"issuer"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://certificate.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"publications"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Publication"</span>,</span><br><span class="line">      <span class="attr">"publisher"</span>: <span class="string">"Company"</span>,</span><br><span class="line">      <span class="attr">"releaseDate"</span>: <span class="string">"2014-10-01"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://publication.com"</span>,</span><br><span class="line">      <span class="attr">"summary"</span>: <span class="string">"Description…"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"skills"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Web Development"</span>,</span><br><span class="line">      <span class="attr">"level"</span>: <span class="string">"Master"</span>,</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"JavaScript"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"languages"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"English"</span>,</span><br><span class="line">      <span class="attr">"fluency"</span>: <span class="string">"Native speaker"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"interests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Wildlife"</span>,</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"Ferrets"</span>, <span class="string">"Unicorns"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"references"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Jane Doe"</span>,</span><br><span class="line">      <span class="attr">"reference"</span>: <span class="string">"Reference…"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Project"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Description…"</span>,</span><br><span class="line">      <span class="attr">"highlights"</span>: [<span class="string">"Won award at AIHacks 2016"</span>],</span><br><span class="line">      <span class="attr">"keywords"</span>: [<span class="string">"HTML"</span>],</span><br><span class="line">      <span class="attr">"startDate"</span>: <span class="string">"2019-01-01"</span>,</span><br><span class="line">      <span class="attr">"endDate"</span>: <span class="string">"2021-01-01"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://project.com/"</span>,</span><br><span class="line">      <span class="attr">"roles"</span>: [<span class="string">"Team Lead"</span>],</span><br><span class="line">      <span class="attr">"entity"</span>: <span class="string">"Entity"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"application"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>修改一下<code>index.ejs</code>，添加一些<a href="https://www.yuque.com/songxingguo/devhints/xnf7wu5wxoucphtg" target="_blank" rel="noopener">ejs 语法</a>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">  &lt;title&gt;Hello EJS！&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;&lt;%= basics.name %&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>最后，你就能运行它了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以开发模式运行</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以生成模式运行</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>下面是运行效果。<br><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FohM8kpQxrzWA2KnUa7KGYQPG_5s.png" alt></p><h2 id="一些小优化"><a href="#一些小优化" class="headerlink" title="一些小优化"></a>一些小优化</h2><h3 id="加粗文字或者添加链接"><a href="#加粗文字或者添加链接" class="headerlink" title="加粗文字或者添加链接"></a>加粗文字或者添加链接</h3><ol><li>在文本中添加标签。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"basics"</span>: &#123;</span><br><span class="line">    <span class="attr">"summary"</span>: <span class="string">"A &lt;b&gt;summary&lt;/b&gt; of &lt;a href='https://www.songxingguo.com/'&gt;John Doe&lt;/a&gt;…"</span>,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>输出是使用<code>&lt;%-</code>可以不转义 html。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- basics.summary %&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>效果如下。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fu-fmOUIpyTJCfvtcquiD09XdaBq.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Action部署静态网站</title>
      <link href="/2023/01/15/%E4%BD%BF%E7%94%A8Github%20Action%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/2023/01/15/%E4%BD%BF%E7%94%A8Github%20Action%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h2><ol><li>进入 Github 生成<a href="https://github.com/settings/apps" target="_blank" rel="noopener">授权 token 的页面</a>，创建一个 token，修改名称并选择所有仓库。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FpT1FXfdY0l7BGM5m1bJf8CpX2vJ.png" alt></p><a id="more"></a><ol start="2"><li>将仓库权限设置中的 Content 项，设置为读和写。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fq0KQlr3rLfbLvpcG3eeBuR3obCM.png" alt></p><ol start="3"><li>最后点击确认生成 token，并<strong>复制</strong>，<strong>注意 ⚠️ 刷新之后就没有办法复制了</strong>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fv9aHq1-NNLTVgSUqUFagqiuXnKq.png" alt></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ol><li>进入到<strong>项目</strong>设置页面，选择添加<a href="https://github.com/songxingguo/resume/settings/secrets/actions" target="_blank" rel="noopener">Actions 的环境变量</a>。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FrIY5Jtbgpf4f6dVbJw05tgPrnLU.png" alt></p><ol start="2"><li>输入变量名称<code>ACCESS_TOKEN</code>，密钥一栏粘贴刚才复制的 Token，点击添加就完成了。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/Fl6OpNuIfRyDofKm-aKoQSfW8LAr.png" alt></p><h2 id="项目中添加配置文件"><a href="#项目中添加配置文件" class="headerlink" title="项目中添加配置文件"></a>项目中添加配置文件</h2><ol><li>在项目的更目录下创建<code>.github/workflows/static.yml</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Build and Deploy</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main #触发自动化部署的分支</span><br><span class="line">jobs:</span><br><span class="line">  build-and-deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout 🛎️ #从触发分支检出代码</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">        <span class="keyword">with</span>:</span><br><span class="line">          persist-credentials: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      - name: Install and Build 🔧 #安装依赖并且打包静态文件</span><br><span class="line">        run: |</span><br><span class="line">          npm i</span><br><span class="line">          npm run build</span><br><span class="line">      - name: Deploy 🚀</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        <span class="keyword">with</span>:</span><br><span class="line">          ACCESS_TOKEN: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br><span class="line">          BRANCH: gh-pages #部署的分支</span><br><span class="line">          FOLDER: dist #打包后静态文件所在的位置</span><br><span class="line">          CLEAN: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后提交代码就开始自动部署了。</li></ol><p><img src="https://raw.githubusercontent.com/songxingguo/songxingguo.github.io/hexo/static/images/FtBuIbPHuD4YxSJImJg7yFsektPM.png" alt></p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
